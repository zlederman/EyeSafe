{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1","program":"/Users/zlederman/.rustup/toolchains/nightly-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","nom","/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=dc51b3e5fd88dc7d","-C","extra-filename=-dc51b3e5fd88dc7d","--out-dir","/Users/zlederman/Documents/Code/rust/EyeSafe/target/rls/debug/deps","-L","dependency=/Users/zlederman/Documents/Code/rust/EyeSafe/target/rls/debug/deps","--extern","memchr=/Users/zlederman/Documents/Code/rust/EyeSafe/target/rls/debug/deps/libmemchr-0b72ee56bd6fd8f7.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/zlederman/.rustup/toolchains/nightly-aarch64-apple-darwin"],"output":"/Users/zlederman/Documents/Code/rust/EyeSafe/target/rls/debug/deps/libnom-dc51b3e5fd88dc7d.rmeta"},"prelude":{"crate_id":{"name":"nom","disambiguator":[18085105174658656095,0]},"crate_root":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src","external_crates":[{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12357763755908187540,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5231689799850066461,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17864008973282999150,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17296295565214172833,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2118848927325286491,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10139776392043815228,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8108086124737747874,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15708407810567005444,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2791263468303431766,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6506189918680636659,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8728067978980854181,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[7214232113437722909,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[10719114933783356113,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[903433031267741442,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[3053230250002770710,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[4944501850750929564,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14620013372125053763,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[2772350835636761323,0]}}],"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":0,"byte_end":15009,"line_start":1,"line_end":468,"column_start":1,"column_end":15}},"imports":[{"kind":"Use","ref_id":{"krate":5,"index":72},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13728,"byte_end":13733,"line_start":389,"line_end":389,"column_start":19,"column_end":24},"alias_span":null,"name":"boxed","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":2653},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13735,"byte_end":13738,"line_start":389,"line_end":389,"column_start":26,"column_end":29},"alias_span":null,"name":"cmp","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":1,"index":989},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13740,"byte_end":13751,"line_start":389,"line_end":389,"column_start":31,"column_end":42},"alias_span":null,"name":"collections","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":2815},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13753,"byte_end":13760,"line_start":389,"line_end":389,"column_start":44,"column_end":51},"alias_span":null,"name":"convert","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":4308},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13762,"byte_end":13765,"line_start":389,"line_end":389,"column_start":53,"column_end":56},"alias_span":null,"name":"fmt","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":9494},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13767,"byte_end":13771,"line_start":389,"line_end":389,"column_start":58,"column_end":62},"alias_span":null,"name":"hash","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":4743},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13773,"byte_end":13777,"line_start":389,"line_end":389,"column_start":64,"column_end":68},"alias_span":null,"name":"iter","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":1837},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13779,"byte_end":13782,"line_start":389,"line_end":389,"column_start":70,"column_end":73},"alias_span":null,"name":"mem","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":3069},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13784,"byte_end":13787,"line_start":389,"line_end":389,"column_start":75,"column_end":78},"alias_span":null,"name":"ops","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":8003},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13789,"byte_end":13795,"line_start":389,"line_end":389,"column_start":80,"column_end":86},"alias_span":null,"name":"option","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":8575},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13797,"byte_end":13803,"line_start":389,"line_end":389,"column_start":88,"column_end":94},"alias_span":null,"name":"result","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":4933},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13805,"byte_end":13810,"line_start":389,"line_end":389,"column_start":96,"column_end":101},"alias_span":null,"name":"slice","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":5208},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13812,"byte_end":13815,"line_start":389,"line_end":389,"column_start":103,"column_end":106},"alias_span":null,"name":"str","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":5413},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13817,"byte_end":13823,"line_start":389,"line_end":389,"column_start":108,"column_end":114},"alias_span":null,"name":"string","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":6268},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13825,"byte_end":13828,"line_start":389,"line_end":389,"column_start":116,"column_end":119},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":5},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13825,"byte_end":13828,"line_start":389,"line_end":389,"column_start":116,"column_end":119},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":1,"index":15},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13872,"byte_end":13879,"line_start":391,"line_end":391,"column_start":20,"column_end":27},"alias_span":null,"name":"v1","value":"","parent":{"krate":0,"index":52}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13922,"byte_end":13923,"line_start":396,"line_end":396,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Slice, InputIter, InputTakeAtPosition, Offset, ParseTo, AsChar, FindToken, InputLength, need_more","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13945,"byte_end":13946,"line_start":397,"line_end":397,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"Convert, ErrorKind","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14087,"byte_end":14088,"line_start":403,"line_end":403,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"Context","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14113,"byte_end":14114,"line_start":405,"line_end":405,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14140,"byte_end":14141,"line_start":406,"line_end":406,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"Err, Needed, IResult","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14165,"byte_end":14166,"line_start":407,"line_end":407,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14191,"byte_end":14192,"line_start":408,"line_end":408,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14215,"byte_end":14216,"line_start":409,"line_end":409,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14242,"byte_end":14243,"line_start":410,"line_end":410,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14266,"byte_end":14267,"line_start":412,"line_end":412,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14290,"byte_end":14291,"line_start":413,"line_end":413,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14319,"byte_end":14320,"line_start":415,"line_end":415,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14341,"byte_end":14342,"line_start":416,"line_end":416,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14371,"byte_end":14372,"line_start":418,"line_end":418,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14446,"byte_end":14447,"line_start":422,"line_end":422,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":0,"byte_end":15009,"line_start":1,"line_end":468,"column_start":1,"column_end":15},"name":"","qualname":"::","value":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":112},{"krate":0,"index":134},{"krate":0,"index":177},{"krate":0,"index":539},{"krate":0,"index":570},{"krate":0,"index":580},{"krate":0,"index":589},{"krate":0,"index":606},{"krate":0,"index":610},{"krate":0,"index":633},{"krate":0,"index":640},{"krate":0,"index":676},{"krate":0,"index":873},{"krate":0,"index":908},{"krate":0,"index":920}],"decl_id":null,"docs":" # nom, eating data byte by byte","sig":null,"attributes":[{"value":"/ # nom, eating data byte by byte","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":0,"byte_end":35,"line_start":1,"line_end":1,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":36,"byte_end":39,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ nom is a parser combinator library with a focus on safe parsing,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":40,"byte_end":108,"line_start":3,"line_end":3,"column_start":1,"column_end":69}},{"value":"/ streaming patterns, and as much as possible zero copy.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":109,"byte_end":167,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":168,"byte_end":171,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":172,"byte_end":186,"line_start":6,"line_end":6,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":187,"byte_end":190,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":191,"byte_end":202,"line_start":8,"line_end":8,"column_start":1,"column_end":12}},{"value":"/ #[macro_use]","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":203,"byte_end":219,"line_start":9,"line_end":9,"column_start":1,"column_end":17}},{"value":"/ extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":220,"byte_end":241,"line_start":10,"line_end":10,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":242,"byte_end":245,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug,PartialEq)]","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":246,"byte_end":276,"line_start":12,"line_end":12,"column_start":1,"column_end":31}},{"value":"/ pub struct Color {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":277,"byte_end":299,"line_start":13,"line_end":13,"column_start":1,"column_end":23}},{"value":"/   pub red:     u8,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":300,"byte_end":322,"line_start":14,"line_end":14,"column_start":1,"column_end":23}},{"value":"/   pub green:   u8,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":323,"byte_end":345,"line_start":15,"line_end":15,"column_start":1,"column_end":23}},{"value":"/   pub blue:    u8,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":346,"byte_end":368,"line_start":16,"line_end":16,"column_start":1,"column_end":23}},{"value":"/ }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":369,"byte_end":374,"line_start":17,"line_end":17,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":375,"byte_end":378,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ fn from_hex(input: &str) -> Result<u8, std::num::ParseIntError> {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":379,"byte_end":448,"line_start":19,"line_end":19,"column_start":1,"column_end":70}},{"value":"/   u8::from_str_radix(input, 16)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":449,"byte_end":484,"line_start":20,"line_end":20,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":485,"byte_end":490,"line_start":21,"line_end":21,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":491,"byte_end":494,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ fn is_hex_digit(c: char) -> bool {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":495,"byte_end":533,"line_start":23,"line_end":23,"column_start":1,"column_end":39}},{"value":"/   c.is_digit(16)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":534,"byte_end":554,"line_start":24,"line_end":24,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":555,"byte_end":560,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":561,"byte_end":564,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ named!(hex_primary<&str, u8>,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":565,"byte_end":598,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/   map_res!(take_while_m_n!(2, 2, is_hex_digit), from_hex)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":599,"byte_end":660,"line_start":28,"line_end":28,"column_start":1,"column_end":62}},{"value":"/ );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":661,"byte_end":667,"line_start":29,"line_end":29,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":668,"byte_end":671,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ named!(hex_color<&str, Color>,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":672,"byte_end":706,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/   do_parse!(","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":707,"byte_end":723,"line_start":32,"line_end":32,"column_start":1,"column_end":17}},{"value":"/            tag!(\"#\")   >>","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":724,"byte_end":753,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"/     red:   hex_primary >>","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":754,"byte_end":783,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/     green: hex_primary >>","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":784,"byte_end":813,"line_start":35,"line_end":35,"column_start":1,"column_end":30}},{"value":"/     blue:  hex_primary >>","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":814,"byte_end":843,"line_start":36,"line_end":36,"column_start":1,"column_end":30}},{"value":"/     (Color { red, green, blue })","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":844,"byte_end":880,"line_start":37,"line_end":37,"column_start":1,"column_end":37}},{"value":"/   )","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":881,"byte_end":888,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":889,"byte_end":895,"line_start":39,"line_end":39,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":896,"byte_end":899,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":900,"byte_end":915,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"/   assert_eq!(hex_color(\"#2F14DF\"), Ok((\"\", Color {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":916,"byte_end":970,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"/     red: 47,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":971,"byte_end":987,"line_start":43,"line_end":43,"column_start":1,"column_end":17}},{"value":"/     green: 20,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":988,"byte_end":1006,"line_start":44,"line_end":44,"column_start":1,"column_end":19}},{"value":"/     blue: 223,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1007,"byte_end":1025,"line_start":45,"line_end":45,"column_start":1,"column_end":19}},{"value":"/   })));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1026,"byte_end":1037,"line_start":46,"line_end":46,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1038,"byte_end":1043,"line_start":47,"line_end":47,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1044,"byte_end":1051,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1052,"byte_end":1055,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ The code is available on [Github](https://github.com/Geal/nom)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1056,"byte_end":1122,"line_start":50,"line_end":50,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1123,"byte_end":1126,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ There are a few [guides](https://github.com/Geal/nom/tree/master/doc) with more details","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1127,"byte_end":1218,"line_start":52,"line_end":52,"column_start":1,"column_end":92}},{"value":"/ about [the design of nom](https://github.com/Geal/nom/blob/master/doc/how_nom_macros_work.md),","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1219,"byte_end":1317,"line_start":53,"line_end":53,"column_start":1,"column_end":99}},{"value":"/ [how to write parsers](https://github.com/Geal/nom/blob/master/doc/making_a_new_parser_from_scratch.md),","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1318,"byte_end":1426,"line_start":54,"line_end":54,"column_start":1,"column_end":109}},{"value":"/ or the [error management system](https://github.com/Geal/nom/blob/master/doc/error_management.md).","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1427,"byte_end":1529,"line_start":55,"line_end":55,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1530,"byte_end":1533,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ **Looking for a specific combinator? Read the","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1534,"byte_end":1583,"line_start":57,"line_end":57,"column_start":1,"column_end":50}},{"value":"/ [\"choose a combinator\" guide](https://github.com/Geal/nom/blob/master/doc/choosing_a_combinator.md)**","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1584,"byte_end":1689,"line_start":58,"line_end":58,"column_start":1,"column_end":106}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1690,"byte_end":1693,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ If you are upgrading to nom 2.0, please read the","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1694,"byte_end":1746,"line_start":60,"line_end":60,"column_start":1,"column_end":53}},{"value":"/ [migration document](https://github.com/Geal/nom/blob/master/doc/upgrading_to_nom_2.md).","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1747,"byte_end":1839,"line_start":61,"line_end":61,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1840,"byte_end":1843,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ If you are upgrading to nom 4.0, please read the","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1844,"byte_end":1896,"line_start":63,"line_end":63,"column_start":1,"column_end":53}},{"value":"/ [migration document](https://github.com/Geal/nom/blob/master/doc/upgrading_to_nom_4.md).","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1897,"byte_end":1989,"line_start":64,"line_end":64,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1990,"byte_end":1993,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ See also the [FAQ](https://github.com/Geal/nom/blob/master/doc/FAQ.md).","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":1994,"byte_end":2069,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2070,"byte_end":2073,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ## Parser combinators","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2074,"byte_end":2099,"line_start":68,"line_end":68,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2100,"byte_end":2103,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Parser combinators are an approach to parsers that is very different from","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2104,"byte_end":2181,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ software like [lex](https://en.wikipedia.org/wiki/Lex_(software)) and","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2182,"byte_end":2255,"line_start":71,"line_end":71,"column_start":1,"column_end":74}},{"value":"/ [yacc](https://en.wikipedia.org/wiki/Yacc). Instead of writing the grammar","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2256,"byte_end":2334,"line_start":72,"line_end":72,"column_start":1,"column_end":79}},{"value":"/ in a separate file and generating the corresponding code, you use very small","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2335,"byte_end":2415,"line_start":73,"line_end":73,"column_start":1,"column_end":81}},{"value":"/ functions with very specific purpose, like \"take 5 bytes\", or \"recognize the","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2416,"byte_end":2496,"line_start":74,"line_end":74,"column_start":1,"column_end":81}},{"value":"/ word 'HTTP'\", and assemble then in meaningful patterns like \"recognize","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2497,"byte_end":2571,"line_start":75,"line_end":75,"column_start":1,"column_end":75}},{"value":"/ 'HTTP', then a space, then a version\".","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2572,"byte_end":2614,"line_start":76,"line_end":76,"column_start":1,"column_end":43}},{"value":"/ The resulting code is small, and looks like the grammar you would have","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2615,"byte_end":2689,"line_start":77,"line_end":77,"column_start":1,"column_end":75}},{"value":"/ written with other parser approaches.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2690,"byte_end":2731,"line_start":78,"line_end":78,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2732,"byte_end":2735,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This has a few advantages:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2736,"byte_end":2766,"line_start":80,"line_end":80,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2767,"byte_end":2770,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ - the parsers are small and easy to write","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2771,"byte_end":2816,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/ - the parsers components are easy to reuse (if they're general enough, please add them to nom!)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2817,"byte_end":2916,"line_start":83,"line_end":83,"column_start":1,"column_end":100}},{"value":"/ - the parsers components are easy to test separately (unit tests and property-based tests)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":2917,"byte_end":3011,"line_start":84,"line_end":84,"column_start":1,"column_end":95}},{"value":"/ - the parser combination code looks close to the grammar you would have written","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3012,"byte_end":3095,"line_start":85,"line_end":85,"column_start":1,"column_end":84}},{"value":"/ - you can build partial parsers, specific to the data you need at the moment, and ignore the rest","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3096,"byte_end":3197,"line_start":86,"line_end":86,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3198,"byte_end":3201,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Here is an example of one such parser, to recognize text between parentheses:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3202,"byte_end":3283,"line_start":88,"line_end":88,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3284,"byte_end":3287,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3288,"byte_end":3299,"line_start":90,"line_end":90,"column_start":1,"column_end":12}},{"value":"/ #[macro_use]","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3300,"byte_end":3316,"line_start":91,"line_end":91,"column_start":1,"column_end":17}},{"value":"/ extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3317,"byte_end":3338,"line_start":92,"line_end":92,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3339,"byte_end":3342,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3343,"byte_end":3360,"line_start":94,"line_end":94,"column_start":1,"column_end":18}},{"value":"/ named!(parens, delimited!(char!('('), is_not!(\")\"), char!(')')));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3361,"byte_end":3430,"line_start":95,"line_end":95,"column_start":1,"column_end":70}},{"value":"/ # }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3431,"byte_end":3438,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3439,"byte_end":3446,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3447,"byte_end":3450,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ It defines a function named `parens`, which will recognize a sequence of the character `(`, the longest byte array not containing `)`, then the character `)`, and will return the byte array in the middle.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3451,"byte_end":3659,"line_start":99,"line_end":99,"column_start":1,"column_end":209}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3660,"byte_end":3663,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Here is another parser, written without using nom's macros this time:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3664,"byte_end":3737,"line_start":101,"line_end":101,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3738,"byte_end":3741,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3742,"byte_end":3753,"line_start":103,"line_end":103,"column_start":1,"column_end":12}},{"value":"/ #[macro_use]","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3754,"byte_end":3770,"line_start":104,"line_end":104,"column_start":1,"column_end":17}},{"value":"/ extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3771,"byte_end":3792,"line_start":105,"line_end":105,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3793,"byte_end":3796,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ use nom::{IResult,Err,Needed};","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3797,"byte_end":3831,"line_start":107,"line_end":107,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3832,"byte_end":3835,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3836,"byte_end":3853,"line_start":109,"line_end":109,"column_start":1,"column_end":18}},{"value":"/ fn take4(i:&[u8]) -> IResult<&[u8], &[u8]>{","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3854,"byte_end":3901,"line_start":110,"line_end":110,"column_start":1,"column_end":48}},{"value":"/   if i.len() < 4 {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3902,"byte_end":3924,"line_start":111,"line_end":111,"column_start":1,"column_end":23}},{"value":"/     Err(Err::Incomplete(Needed::Size(4)))","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46}},{"value":"/   } else {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3971,"byte_end":3985,"line_start":113,"line_end":113,"column_start":1,"column_end":15}},{"value":"/     Ok((&i[4..],&i[0..4]))","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":3986,"byte_end":4016,"line_start":114,"line_end":114,"column_start":1,"column_end":31}},{"value":"/   }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4017,"byte_end":4024,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4025,"byte_end":4030,"line_start":116,"line_end":116,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4031,"byte_end":4038,"line_start":117,"line_end":117,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4039,"byte_end":4046,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4047,"byte_end":4050,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ This function takes a byte array as input, and tries to consume 4 bytes.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4051,"byte_end":4127,"line_start":120,"line_end":120,"column_start":1,"column_end":77}},{"value":"/ Writing all the parsers manually, like this, is dangerous, despite Rust's safety features. There","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4128,"byte_end":4228,"line_start":121,"line_end":121,"column_start":1,"column_end":101}},{"value":"/ are still a lot of mistakes one can make. That's why nom provides a list of macros to help in","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4229,"byte_end":4326,"line_start":122,"line_end":122,"column_start":1,"column_end":98}},{"value":"/ developing parsers.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4327,"byte_end":4350,"line_start":123,"line_end":123,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4351,"byte_end":4354,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ With macros, you would write it like this:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4355,"byte_end":4401,"line_start":125,"line_end":125,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4402,"byte_end":4405,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4406,"byte_end":4417,"line_start":127,"line_end":127,"column_start":1,"column_end":12}},{"value":"/ #[macro_use]","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4418,"byte_end":4434,"line_start":128,"line_end":128,"column_start":1,"column_end":17}},{"value":"/ extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4435,"byte_end":4456,"line_start":129,"line_end":129,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4457,"byte_end":4460,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4461,"byte_end":4478,"line_start":131,"line_end":131,"column_start":1,"column_end":18}},{"value":"/ named!(take4, take!(4));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4479,"byte_end":4507,"line_start":132,"line_end":132,"column_start":1,"column_end":29}},{"value":"/ # }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4508,"byte_end":4515,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4516,"byte_end":4523,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4524,"byte_end":4527,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ A parser in nom is a function which, for an input type `I`, an output type `O`","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4528,"byte_end":4610,"line_start":136,"line_end":136,"column_start":1,"column_end":83}},{"value":"/ and an optional error type `E`, will have the following signature:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4611,"byte_end":4681,"line_start":137,"line_end":137,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4682,"byte_end":4685,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4686,"byte_end":4704,"line_start":139,"line_end":139,"column_start":1,"column_end":19}},{"value":"/ fn parser(input: I) -> IResult<I, O, E>;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4705,"byte_end":4749,"line_start":140,"line_end":140,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4750,"byte_end":4757,"line_start":141,"line_end":141,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4758,"byte_end":4761,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ Or like this, if you don't want to specify a custom error type (it will be `u32` by default):","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4762,"byte_end":4859,"line_start":143,"line_end":143,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4860,"byte_end":4863,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4864,"byte_end":4882,"line_start":145,"line_end":145,"column_start":1,"column_end":19}},{"value":"/ fn parser(input: I) -> IResult<I, O>;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4883,"byte_end":4924,"line_start":146,"line_end":146,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4925,"byte_end":4932,"line_start":147,"line_end":147,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4933,"byte_end":4936,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ `IResult` is an alias for the `Result` type:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4937,"byte_end":4985,"line_start":149,"line_end":149,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4986,"byte_end":4989,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":4990,"byte_end":5001,"line_start":151,"line_end":151,"column_start":1,"column_end":12}},{"value":"/ use nom::{Needed, Context};","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5002,"byte_end":5033,"line_start":152,"line_end":152,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5034,"byte_end":5037,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ type IResult<I, O, E = u32> = Result<(I, O), Err<I, E>>;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5038,"byte_end":5098,"line_start":154,"line_end":154,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5099,"byte_end":5102,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ enum Err<I, E = u32> {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5103,"byte_end":5129,"line_start":156,"line_end":156,"column_start":1,"column_end":27}},{"value":"/   Incomplete(Needed),","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5130,"byte_end":5155,"line_start":157,"line_end":157,"column_start":1,"column_end":26}},{"value":"/   Error(Context<I, E>),","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5156,"byte_end":5183,"line_start":158,"line_end":158,"column_start":1,"column_end":28}},{"value":"/   Failure(Context<I, E>),","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5184,"byte_end":5213,"line_start":159,"line_end":159,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5214,"byte_end":5219,"line_start":160,"line_end":160,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5220,"byte_end":5227,"line_start":161,"line_end":161,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5228,"byte_end":5231,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ It can have the following values:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5232,"byte_end":5269,"line_start":163,"line_end":163,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5270,"byte_end":5273,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ - a correct result `Ok((I,O))` with the first element being the remaining of the input (not parsed yet), and the second the output value;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5274,"byte_end":5415,"line_start":165,"line_end":165,"column_start":1,"column_end":142}},{"value":"/ - an error `Err(Err::Error(c))` with `c` an enum that contains an error code with its position in the input, and optionally a chain of accumulated errors;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5416,"byte_end":5574,"line_start":166,"line_end":166,"column_start":1,"column_end":159}},{"value":"/ - an error `Err(Err::Incomplete(Needed))` indicating that more input is necessary. `Needed` can indicate how much data is needed","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5575,"byte_end":5707,"line_start":167,"line_end":167,"column_start":1,"column_end":133}},{"value":"/ - an error `Err(Err::Failure(c))`. It works like the `Error` case, except it indicates an unrecoverable error: we cannot backtrack and test another parser","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5708,"byte_end":5866,"line_start":168,"line_end":168,"column_start":1,"column_end":159}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5867,"byte_end":5870,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ Please refer to the [documentation][doc] for an exhaustive list of parsers. See also the","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5871,"byte_end":5963,"line_start":170,"line_end":170,"column_start":1,"column_end":93}},{"value":"/ [\"choose a combinator\" guide](https://github.com/Geal/nom/blob/master/doc/choosing_a_combinator.md)**.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":5964,"byte_end":6070,"line_start":171,"line_end":171,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6071,"byte_end":6074,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ ## Making new parsers with macros","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6075,"byte_end":6112,"line_start":173,"line_end":173,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6113,"byte_end":6116,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ Macros are the main way to make new parsers by combining other ones. Those macros accept other macros or function names as arguments. You then need to make a function out of that combinator with **`named!`**, or a closure with **`closure!`**. Here is how you would do, with the **`tag!`** and **`take!`** combinators:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6117,"byte_end":6438,"line_start":175,"line_end":175,"column_start":1,"column_end":322}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6439,"byte_end":6442,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6443,"byte_end":6454,"line_start":177,"line_end":177,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6455,"byte_end":6491,"line_start":178,"line_end":178,"column_start":1,"column_end":37}},{"value":"/ # fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6492,"byte_end":6509,"line_start":179,"line_end":179,"column_start":1,"column_end":18}},{"value":"/ named!(abcd_parser, tag!(\"abcd\")); // will consume bytes if the input begins with \"abcd\"","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6510,"byte_end":6602,"line_start":180,"line_end":180,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6603,"byte_end":6606,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ named!(take_10, take!(10));        // will consume and return 10 bytes of input","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6607,"byte_end":6690,"line_start":182,"line_end":182,"column_start":1,"column_end":84}},{"value":"/ # }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6691,"byte_end":6698,"line_start":183,"line_end":183,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6699,"byte_end":6706,"line_start":184,"line_end":184,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6707,"byte_end":6710,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ The **`named!`** macro can take three different syntaxes:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6711,"byte_end":6772,"line_start":186,"line_end":186,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6773,"byte_end":6776,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6777,"byte_end":6795,"line_start":188,"line_end":188,"column_start":1,"column_end":19}},{"value":"/ named!(my_function( &[u8] ) -> &[u8], tag!(\"abcd\"));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6796,"byte_end":6852,"line_start":189,"line_end":189,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6853,"byte_end":6856,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ named!(my_function<&[u8], &[u8]>, tag!(\"abcd\"));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6857,"byte_end":6909,"line_start":191,"line_end":191,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6910,"byte_end":6913,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ named!(my_function, tag!(\"abcd\")); // when you know the parser takes &[u8] as input, and returns &[u8] as output","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":6914,"byte_end":7030,"line_start":193,"line_end":193,"column_start":1,"column_end":117}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7031,"byte_end":7038,"line_start":194,"line_end":194,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7039,"byte_end":7042,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ **IMPORTANT NOTE**: Rust's macros can be very sensitive to the syntax, so you may encounter an error compiling parsers like this one:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7043,"byte_end":7180,"line_start":196,"line_end":196,"column_start":1,"column_end":138}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7181,"byte_end":7184,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7185,"byte_end":7196,"line_start":198,"line_end":198,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7197,"byte_end":7233,"line_start":199,"line_end":199,"column_start":1,"column_end":37}},{"value":"/ # #[cfg(feature = \"alloc\")]","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7234,"byte_end":7265,"line_start":200,"line_end":200,"column_start":1,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7266,"byte_end":7283,"line_start":201,"line_end":201,"column_start":1,"column_end":18}},{"value":"/ named!(my_function<&[u8], Vec<&[u8]>>, many0!(tag!(\"abcd\")));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7284,"byte_end":7349,"line_start":202,"line_end":202,"column_start":1,"column_end":66}},{"value":"/ # }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7350,"byte_end":7357,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7358,"byte_end":7361,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ # #[cfg(not(feature = \"alloc\"))]","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7362,"byte_end":7398,"line_start":205,"line_end":205,"column_start":1,"column_end":37}},{"value":"/ # fn main() {}","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7399,"byte_end":7417,"line_start":206,"line_end":206,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7418,"byte_end":7425,"line_start":207,"line_end":207,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7426,"byte_end":7429,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ You will get the following error: `error: expected an item keyword`. This","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7430,"byte_end":7507,"line_start":209,"line_end":209,"column_start":1,"column_end":78}},{"value":"/ happens because `>>` is seen as an operator, so the macro parser does not","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7508,"byte_end":7585,"line_start":210,"line_end":210,"column_start":1,"column_end":78}},{"value":"/ recognize what we want. There is a way to avoid it, by inserting a space:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7586,"byte_end":7663,"line_start":211,"line_end":211,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7664,"byte_end":7667,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7668,"byte_end":7679,"line_start":213,"line_end":213,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7680,"byte_end":7716,"line_start":214,"line_end":214,"column_start":1,"column_end":37}},{"value":"/ # #[cfg(feature = \"alloc\")]","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7717,"byte_end":7748,"line_start":215,"line_end":215,"column_start":1,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7749,"byte_end":7766,"line_start":216,"line_end":216,"column_start":1,"column_end":18}},{"value":"/ named!(my_function<&[u8], Vec<&[u8]> >, many0!(tag!(\"abcd\")));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7767,"byte_end":7833,"line_start":217,"line_end":217,"column_start":1,"column_end":67}},{"value":"/ # }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7834,"byte_end":7841,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"alloc\"))]","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7842,"byte_end":7878,"line_start":219,"line_end":219,"column_start":1,"column_end":37}},{"value":"/ # fn main() {}","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7879,"byte_end":7897,"line_start":220,"line_end":220,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7898,"byte_end":7905,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7906,"byte_end":7909,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ This will compile correctly. I am very sorry for this inconvenience.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7910,"byte_end":7982,"line_start":223,"line_end":223,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7983,"byte_end":7986,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ ## Combining parsers","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":7987,"byte_end":8011,"line_start":225,"line_end":225,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8012,"byte_end":8015,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ There are more high level patterns, like the **`alt!`** combinator, which provides a choice between multiple parsers. If one branch fails, it tries the next, and returns the result of the first parser that succeeds:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8016,"byte_end":8235,"line_start":227,"line_end":227,"column_start":1,"column_end":220}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8236,"byte_end":8239,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8240,"byte_end":8251,"line_start":229,"line_end":229,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8252,"byte_end":8288,"line_start":230,"line_end":230,"column_start":1,"column_end":37}},{"value":"/ # fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8289,"byte_end":8306,"line_start":231,"line_end":231,"column_start":1,"column_end":18}},{"value":"/ named!(alt_tags, alt!(tag!(\"abcd\") | tag!(\"efgh\")));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8307,"byte_end":8363,"line_start":232,"line_end":232,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8364,"byte_end":8367,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(alt_tags(b\"abcdxxx\"), Ok((&b\"xxx\"[..], &b\"abcd\"[..])));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8368,"byte_end":8438,"line_start":234,"line_end":234,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(alt_tags(b\"efghxxx\"), Ok((&b\"xxx\"[..], &b\"efgh\"[..])));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8439,"byte_end":8509,"line_start":235,"line_end":235,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(alt_tags(b\"ijklxxx\"), Err(nom::Err::Error(error_position!(&b\"ijklxxx\"[..], nom::ErrorKind::Alt))));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8510,"byte_end":8624,"line_start":236,"line_end":236,"column_start":1,"column_end":115}},{"value":"/ # }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8625,"byte_end":8632,"line_start":237,"line_end":237,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8633,"byte_end":8640,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8641,"byte_end":8644,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ The pipe `|` character is used as separator.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8645,"byte_end":8693,"line_start":240,"line_end":240,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8694,"byte_end":8697,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ The **`opt!`** combinator makes a parser optional. If the child parser returns an error, **`opt!`** will succeed and return None:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8698,"byte_end":8831,"line_start":242,"line_end":242,"column_start":1,"column_end":134}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8832,"byte_end":8835,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8836,"byte_end":8847,"line_start":244,"line_end":244,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8848,"byte_end":8884,"line_start":245,"line_end":245,"column_start":1,"column_end":37}},{"value":"/ # fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8885,"byte_end":8902,"line_start":246,"line_end":246,"column_start":1,"column_end":18}},{"value":"/ named!( abcd_opt< &[u8], Option<&[u8]> >, opt!( tag!(\"abcd\") ) );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8903,"byte_end":8972,"line_start":247,"line_end":247,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8973,"byte_end":8976,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(abcd_opt(b\"abcdxxx\"), Ok((&b\"xxx\"[..], Some(&b\"abcd\"[..]))));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":8977,"byte_end":9053,"line_start":249,"line_end":249,"column_start":1,"column_end":77}},{"value":"/ assert_eq!(abcd_opt(b\"efghxxx\"), Ok((&b\"efghxxx\"[..], None)));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9054,"byte_end":9120,"line_start":250,"line_end":250,"column_start":1,"column_end":67}},{"value":"/ # }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9121,"byte_end":9128,"line_start":251,"line_end":251,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9129,"byte_end":9136,"line_start":252,"line_end":252,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9137,"byte_end":9140,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ **`many0!`** applies a parser 0 or more times, and returns a vector of the aggregated results:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9141,"byte_end":9239,"line_start":254,"line_end":254,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9240,"byte_end":9243,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9244,"byte_end":9255,"line_start":256,"line_end":256,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9256,"byte_end":9292,"line_start":257,"line_end":257,"column_start":1,"column_end":37}},{"value":"/ # #[cfg(feature = \"alloc\")]","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9293,"byte_end":9324,"line_start":258,"line_end":258,"column_start":1,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9325,"byte_end":9342,"line_start":259,"line_end":259,"column_start":1,"column_end":18}},{"value":"/ use std::str;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9343,"byte_end":9360,"line_start":260,"line_end":260,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9361,"byte_end":9364,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ named!(multi< Vec<&str> >, many0!( map_res!(tag!( \"abcd\" ), str::from_utf8) ) );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9365,"byte_end":9449,"line_start":262,"line_end":262,"column_start":1,"column_end":85}},{"value":"/ let a = b\"abcdef\";","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9450,"byte_end":9472,"line_start":263,"line_end":263,"column_start":1,"column_end":23}},{"value":"/ let b = b\"abcdabcdef\";","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9473,"byte_end":9499,"line_start":264,"line_end":264,"column_start":1,"column_end":27}},{"value":"/ let c = b\"azerty\";","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9500,"byte_end":9522,"line_start":265,"line_end":265,"column_start":1,"column_end":23}},{"value":"/ assert_eq!(multi(a), Ok((&b\"ef\"[..],     vec![\"abcd\"])));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9523,"byte_end":9584,"line_start":266,"line_end":266,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(multi(b), Ok((&b\"ef\"[..],     vec![\"abcd\", \"abcd\"])));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9585,"byte_end":9654,"line_start":267,"line_end":267,"column_start":1,"column_end":70}},{"value":"/ assert_eq!(multi(c), Ok((&b\"azerty\"[..], Vec::new())));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9655,"byte_end":9714,"line_start":268,"line_end":268,"column_start":1,"column_end":60}},{"value":"/ # }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9715,"byte_end":9722,"line_start":269,"line_end":269,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"alloc\"))]","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9723,"byte_end":9759,"line_start":270,"line_end":270,"column_start":1,"column_end":37}},{"value":"/ # fn main() {}","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9760,"byte_end":9778,"line_start":271,"line_end":271,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9779,"byte_end":9786,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9787,"byte_end":9790,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ Here are some basic combining macros available:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9791,"byte_end":9842,"line_start":274,"line_end":274,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9843,"byte_end":9846,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ - **`opt!`**: will make the parser optional (if it returns the `O` type, the new parser returns `Option<O>`)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9847,"byte_end":9959,"line_start":276,"line_end":276,"column_start":1,"column_end":113}},{"value":"/ - **`many0!`**: will apply the parser 0 or more times (if it returns the `O` type, the new parser returns `Vec<O>`)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":9960,"byte_end":10079,"line_start":277,"line_end":277,"column_start":1,"column_end":120}},{"value":"/ - **`many1!`**: will apply the parser 1 or more times","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10080,"byte_end":10137,"line_start":278,"line_end":278,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10138,"byte_end":10141,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ There are more complex (and more useful) parsers like `do_parse!` and `tuple!`, which are used to apply a series of parsers then assemble their results.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10142,"byte_end":10298,"line_start":280,"line_end":280,"column_start":1,"column_end":157}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10299,"byte_end":10302,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ Example with `tuple!`:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10303,"byte_end":10329,"line_start":282,"line_end":282,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10330,"byte_end":10333,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10334,"byte_end":10345,"line_start":284,"line_end":284,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10346,"byte_end":10382,"line_start":285,"line_end":285,"column_start":1,"column_end":37}},{"value":"/ # fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10383,"byte_end":10400,"line_start":286,"line_end":286,"column_start":1,"column_end":18}},{"value":"/ use nom::{ErrorKind, Needed,be_u16};","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10401,"byte_end":10441,"line_start":287,"line_end":287,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10442,"byte_end":10445,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ named!(tpl<&[u8], (u16, &[u8], &[u8]) >,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10446,"byte_end":10490,"line_start":289,"line_end":289,"column_start":1,"column_end":45}},{"value":"/   tuple!(","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10491,"byte_end":10504,"line_start":290,"line_end":290,"column_start":1,"column_end":14}},{"value":"/     be_u16 ,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10505,"byte_end":10521,"line_start":291,"line_end":291,"column_start":1,"column_end":17}},{"value":"/     take!(3),","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10522,"byte_end":10539,"line_start":292,"line_end":292,"column_start":1,"column_end":18}},{"value":"/     tag!(\"fg\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10540,"byte_end":10558,"line_start":293,"line_end":293,"column_start":1,"column_end":19}},{"value":"/   )","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10559,"byte_end":10566,"line_start":294,"line_end":294,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10567,"byte_end":10573,"line_start":295,"line_end":295,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10574,"byte_end":10577,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10578,"byte_end":10593,"line_start":297,"line_end":297,"column_start":1,"column_end":16}},{"value":"/   tpl(&b\"abcdefgh\"[..]),","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10594,"byte_end":10622,"line_start":298,"line_end":298,"column_start":1,"column_end":29}},{"value":"/   Ok((","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10623,"byte_end":10633,"line_start":299,"line_end":299,"column_start":1,"column_end":11}},{"value":"/     &b\"h\"[..],","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10634,"byte_end":10652,"line_start":300,"line_end":300,"column_start":1,"column_end":19}},{"value":"/     (0x6162u16, &b\"cde\"[..], &b\"fg\"[..])","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10653,"byte_end":10697,"line_start":301,"line_end":301,"column_start":1,"column_end":45}},{"value":"/   ))","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10698,"byte_end":10706,"line_start":302,"line_end":302,"column_start":1,"column_end":9}},{"value":"/ );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10707,"byte_end":10713,"line_start":303,"line_end":303,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(tpl(&b\"abcde\"[..]), Err(nom::Err::Incomplete(Needed::Size(2))));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10714,"byte_end":10793,"line_start":304,"line_end":304,"column_start":1,"column_end":80}},{"value":"/ let input = &b\"abcdejk\"[..];","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10794,"byte_end":10826,"line_start":305,"line_end":305,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(tpl(input), Err(nom::Err::Error(error_position!(&input[5..], ErrorKind::Tag))));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10827,"byte_end":10922,"line_start":306,"line_end":306,"column_start":1,"column_end":96}},{"value":"/ # }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10923,"byte_end":10930,"line_start":307,"line_end":307,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10931,"byte_end":10938,"line_start":308,"line_end":308,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10939,"byte_end":10942,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ Example with `do_parse!`:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10943,"byte_end":10972,"line_start":310,"line_end":310,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10973,"byte_end":10976,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10977,"byte_end":10988,"line_start":312,"line_end":312,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":10989,"byte_end":11025,"line_start":313,"line_end":313,"column_start":1,"column_end":37}},{"value":"/ # fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11026,"byte_end":11043,"line_start":314,"line_end":314,"column_start":1,"column_end":18}},{"value":"/ use nom::IResult;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11044,"byte_end":11065,"line_start":315,"line_end":315,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11066,"byte_end":11069,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11070,"byte_end":11101,"line_start":317,"line_end":317,"column_start":1,"column_end":32}},{"value":"/ struct A {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11102,"byte_end":11116,"line_start":318,"line_end":318,"column_start":1,"column_end":15}},{"value":"/   a: u8,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11117,"byte_end":11129,"line_start":319,"line_end":319,"column_start":1,"column_end":13}},{"value":"/   b: u8","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11130,"byte_end":11141,"line_start":320,"line_end":320,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11142,"byte_end":11147,"line_start":321,"line_end":321,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11148,"byte_end":11151,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ fn ret_int1(i:&[u8]) -> IResult<&[u8], u8> { Ok((i,1)) }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11152,"byte_end":11212,"line_start":323,"line_end":323,"column_start":1,"column_end":61}},{"value":"/ fn ret_int2(i:&[u8]) -> IResult<&[u8], u8> { Ok((i,2)) }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11213,"byte_end":11273,"line_start":324,"line_end":324,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11274,"byte_end":11277,"line_start":325,"line_end":325,"column_start":1,"column_end":4}},{"value":"/ named!(f<&[u8],A>,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11278,"byte_end":11300,"line_start":326,"line_end":326,"column_start":1,"column_end":23}},{"value":"/   do_parse!(    // the parser takes a byte array as input, and returns an A struct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11301,"byte_end":11387,"line_start":327,"line_end":327,"column_start":1,"column_end":87}},{"value":"/     tag!(\"abcd\")       >>      // begins with \"abcd\"","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11388,"byte_end":11444,"line_start":328,"line_end":328,"column_start":1,"column_end":57}},{"value":"/     opt!(tag!(\"abcd\")) >>      // this is an optional parser","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11445,"byte_end":11509,"line_start":329,"line_end":329,"column_start":1,"column_end":65}},{"value":"/     aa: ret_int1       >>      // the return value of ret_int1, if it does not fail, will be stored in aa","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11510,"byte_end":11619,"line_start":330,"line_end":330,"column_start":1,"column_end":110}},{"value":"/     tag!(\"efgh\")       >>","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11620,"byte_end":11649,"line_start":331,"line_end":331,"column_start":1,"column_end":30}},{"value":"/     bb: ret_int2       >>","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11650,"byte_end":11679,"line_start":332,"line_end":332,"column_start":1,"column_end":30}},{"value":"/     tag!(\"efgh\")       >>","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11680,"byte_end":11709,"line_start":333,"line_end":333,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11710,"byte_end":11713,"line_start":334,"line_end":334,"column_start":1,"column_end":4}},{"value":"/     (A{a: aa, b: bb})          // the final tuple will be able to use the variable defined previously","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11714,"byte_end":11819,"line_start":335,"line_end":335,"column_start":1,"column_end":106}},{"value":"/   )","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11820,"byte_end":11827,"line_start":336,"line_end":336,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11828,"byte_end":11834,"line_start":337,"line_end":337,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11835,"byte_end":11838,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ let r = f(b\"abcdabcdefghefghX\");","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11839,"byte_end":11875,"line_start":339,"line_end":339,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(r, Ok((&b\"X\"[..], A{a: 1, b: 2})));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11876,"byte_end":11926,"line_start":340,"line_end":340,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11927,"byte_end":11930,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ let r2 = f(b\"abcdefghefghX\");","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11931,"byte_end":11964,"line_start":342,"line_end":342,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(r2, Ok((&b\"X\"[..], A{a: 1, b: 2})));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":11965,"byte_end":12016,"line_start":343,"line_end":343,"column_start":1,"column_end":52}},{"value":"/ # }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":12017,"byte_end":12024,"line_start":344,"line_end":344,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":12025,"byte_end":12032,"line_start":345,"line_end":345,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":12033,"byte_end":12036,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ The double right arrow `>>` is used as separator between every parser in the sequence, and the last closure can see the variables storing the result of parsers. Unless the specified return type is already a tuple, the final line should be that type wrapped in a tuple.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":12037,"byte_end":12309,"line_start":347,"line_end":347,"column_start":1,"column_end":273}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":12310,"byte_end":12313,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ More examples of [`do_parse!`](macro.do_parse.html) and [`tuple!`](macro.tuple.html) usage can be found in the [INI file parser example](tests/ini.rs).","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":12314,"byte_end":12469,"line_start":349,"line_end":349,"column_start":1,"column_end":156}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":12470,"byte_end":12473,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ **Going further:** read the [guides](https://github.com/Geal/nom/tree/master/doc)!","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":12474,"byte_end":12560,"line_start":351,"line_end":351,"column_start":1,"column_end":87}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13213,"byte_end":13216,"line_start":372,"line_end":372,"column_start":9,"column_end":12},"name":"lib","qualname":"::lib","value":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":5}],"decl_id":null,"docs":" Lib module to re-export everything needed from `std` or `core`/`alloc`. This is how `serde` does\n it, albeit there it is not public.\n","sig":null,"attributes":[{"value":"/ Lib module to re-export everything needed from `std` or `core`/`alloc`. This is how `serde` does","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13065,"byte_end":13165,"line_start":370,"line_end":370,"column_start":1,"column_end":101}},{"value":"/ it, albeit there it is not public.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13166,"byte_end":13204,"line_start":371,"line_end":371,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13704,"byte_end":13707,"line_start":388,"line_end":388,"column_start":11,"column_end":14},"name":"std","qualname":"::lib::std","value":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":52}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13670,"byte_end":13693,"line_start":387,"line_end":387,"column_start":3,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":52},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":13843,"byte_end":13850,"line_start":390,"line_end":390,"column_start":13,"column_end":20},"name":"prelude","qualname":"::lib::std::prelude","value":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":53}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":81},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":15364,"byte_end":15374,"line_start":16,"line_end":16,"column_start":11,"column_end":21},"name":"HexDisplay","qualname":"::util::HexDisplay","value":"HexDisplay","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":15330,"byte_end":15353,"line_start":15,"line_end":15,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":15466,"byte_end":15472,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"name":"to_hex","qualname":"::util::HexDisplay::to_hex","value":"pub fn to_hex(&Self, usize) -> String","parent":{"krate":0,"index":81},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a hex dump, returning the owned\n string.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a hex dump, returning the owned","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":15379,"byte_end":15446,"line_start":17,"line_end":17,"column_start":3,"column_end":70}},{"value":"/ string.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":15449,"byte_end":15460,"line_start":18,"line_end":18,"column_start":3,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":15628,"byte_end":15639,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"name":"to_hex_from","qualname":"::util::HexDisplay::to_hex_from","value":"pub fn to_hex_from(&Self, usize, usize) -> String","parent":{"krate":0,"index":81},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a hex dump beginning at `from` address, returning the owned\n string.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a hex dump beginning at `from` address, returning the owned","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":15513,"byte_end":15608,"line_start":21,"line_end":21,"column_start":3,"column_end":98}},{"value":"/ string.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":15611,"byte_end":15622,"line_start":22,"line_end":22,"column_start":3,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":93},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":20187,"byte_end":20203,"line_start":209,"line_end":209,"column_start":8,"column_end":24},"name":"slice_to_offsets","qualname":"::util::slice_to_offsets","value":"pub fn slice_to_offsets(&[u8], &[u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":94},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":21804,"byte_end":21820,"line_start":270,"line_end":270,"column_start":8,"column_end":24},"name":"code_from_offset","qualname":"::util::code_from_offset","value":"pub fn code_from_offset<E>(&[(ErrorKind<E>, usize, usize)], usize)\n-> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":96},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":22358,"byte_end":22369,"line_start":292,"line_end":292,"column_start":8,"column_end":19},"name":"reset_color","qualname":"::util::reset_color","value":"pub fn reset_color(&mut Vec<u8>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":22325,"byte_end":22350,"line_start":291,"line_end":291,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":97},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":22486,"byte_end":22497,"line_start":300,"line_end":300,"column_start":8,"column_end":19},"name":"write_color","qualname":"::util::write_color","value":"pub fn write_color(&mut Vec<u8>, u8)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":22453,"byte_end":22478,"line_start":299,"line_end":299,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":98},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":22793,"byte_end":22804,"line_start":313,"line_end":313,"column_start":8,"column_end":19},"name":"print_codes","qualname":"::util::print_codes","value":"pub fn print_codes(&HashMap<u32, u8>, &HashMap<u32, &str>) -> String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":22700,"byte_end":22723,"line_start":311,"line_end":311,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1252},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25781,"byte_end":25787,"line_start":426,"line_end":426,"column_start":3,"column_end":9},"name":"Custom","qualname":"::util::ErrorKind::Custom","value":"ErrorKind::Custom(E)","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1255},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25794,"byte_end":25797,"line_start":427,"line_end":427,"column_start":3,"column_end":6},"name":"Tag","qualname":"::util::ErrorKind::Tag","value":"ErrorKind::Tag","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1257},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25801,"byte_end":25807,"line_start":428,"line_end":428,"column_start":3,"column_end":9},"name":"MapRes","qualname":"::util::ErrorKind::MapRes","value":"ErrorKind::MapRes","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1259},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25811,"byte_end":25817,"line_start":429,"line_end":429,"column_start":3,"column_end":9},"name":"MapOpt","qualname":"::util::ErrorKind::MapOpt","value":"ErrorKind::MapOpt","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1261},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25821,"byte_end":25824,"line_start":430,"line_end":430,"column_start":3,"column_end":6},"name":"Alt","qualname":"::util::ErrorKind::Alt","value":"ErrorKind::Alt","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1263},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25828,"byte_end":25833,"line_start":431,"line_end":431,"column_start":3,"column_end":8},"name":"IsNot","qualname":"::util::ErrorKind::IsNot","value":"ErrorKind::IsNot","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1265},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25837,"byte_end":25840,"line_start":432,"line_end":432,"column_start":3,"column_end":6},"name":"IsA","qualname":"::util::ErrorKind::IsA","value":"ErrorKind::IsA","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1267},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25844,"byte_end":25857,"line_start":433,"line_end":433,"column_start":3,"column_end":16},"name":"SeparatedList","qualname":"::util::ErrorKind::SeparatedList","value":"ErrorKind::SeparatedList","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1269},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25861,"byte_end":25882,"line_start":434,"line_end":434,"column_start":3,"column_end":24},"name":"SeparatedNonEmptyList","qualname":"::util::ErrorKind::SeparatedNonEmptyList","value":"ErrorKind::SeparatedNonEmptyList","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1271},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25886,"byte_end":25891,"line_start":435,"line_end":435,"column_start":3,"column_end":8},"name":"Many0","qualname":"::util::ErrorKind::Many0","value":"ErrorKind::Many0","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1273},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25895,"byte_end":25900,"line_start":436,"line_end":436,"column_start":3,"column_end":8},"name":"Many1","qualname":"::util::ErrorKind::Many1","value":"ErrorKind::Many1","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1275},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25904,"byte_end":25912,"line_start":437,"line_end":437,"column_start":3,"column_end":11},"name":"ManyTill","qualname":"::util::ErrorKind::ManyTill","value":"ErrorKind::ManyTill","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1277},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25916,"byte_end":25921,"line_start":438,"line_end":438,"column_start":3,"column_end":8},"name":"Count","qualname":"::util::ErrorKind::Count","value":"ErrorKind::Count","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1279},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25925,"byte_end":25944,"line_start":439,"line_end":439,"column_start":3,"column_end":22},"name":"TakeUntilAndConsume","qualname":"::util::ErrorKind::TakeUntilAndConsume","value":"ErrorKind::TakeUntilAndConsume","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1281},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25948,"byte_end":25957,"line_start":440,"line_end":440,"column_start":3,"column_end":12},"name":"TakeUntil","qualname":"::util::ErrorKind::TakeUntil","value":"ErrorKind::TakeUntil","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1283},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25961,"byte_end":25986,"line_start":441,"line_end":441,"column_start":3,"column_end":28},"name":"TakeUntilEitherAndConsume","qualname":"::util::ErrorKind::TakeUntilEitherAndConsume","value":"ErrorKind::TakeUntilEitherAndConsume","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1285},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25990,"byte_end":26005,"line_start":442,"line_end":442,"column_start":3,"column_end":18},"name":"TakeUntilEither","qualname":"::util::ErrorKind::TakeUntilEither","value":"ErrorKind::TakeUntilEither","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1287},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26009,"byte_end":26020,"line_start":443,"line_end":443,"column_start":3,"column_end":14},"name":"LengthValue","qualname":"::util::ErrorKind::LengthValue","value":"ErrorKind::LengthValue","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1289},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26024,"byte_end":26034,"line_start":444,"line_end":444,"column_start":3,"column_end":13},"name":"TagClosure","qualname":"::util::ErrorKind::TagClosure","value":"ErrorKind::TagClosure","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1291},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26038,"byte_end":26043,"line_start":445,"line_end":445,"column_start":3,"column_end":8},"name":"Alpha","qualname":"::util::ErrorKind::Alpha","value":"ErrorKind::Alpha","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1293},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26047,"byte_end":26052,"line_start":446,"line_end":446,"column_start":3,"column_end":8},"name":"Digit","qualname":"::util::ErrorKind::Digit","value":"ErrorKind::Digit","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1295},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26056,"byte_end":26064,"line_start":447,"line_end":447,"column_start":3,"column_end":11},"name":"HexDigit","qualname":"::util::ErrorKind::HexDigit","value":"ErrorKind::HexDigit","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1297},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26068,"byte_end":26076,"line_start":448,"line_end":448,"column_start":3,"column_end":11},"name":"OctDigit","qualname":"::util::ErrorKind::OctDigit","value":"ErrorKind::OctDigit","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1299},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26080,"byte_end":26092,"line_start":449,"line_end":449,"column_start":3,"column_end":15},"name":"AlphaNumeric","qualname":"::util::ErrorKind::AlphaNumeric","value":"ErrorKind::AlphaNumeric","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1301},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26096,"byte_end":26101,"line_start":450,"line_end":450,"column_start":3,"column_end":8},"name":"Space","qualname":"::util::ErrorKind::Space","value":"ErrorKind::Space","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1303},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26105,"byte_end":26115,"line_start":451,"line_end":451,"column_start":3,"column_end":13},"name":"MultiSpace","qualname":"::util::ErrorKind::MultiSpace","value":"ErrorKind::MultiSpace","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1305},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26119,"byte_end":26132,"line_start":452,"line_end":452,"column_start":3,"column_end":16},"name":"LengthValueFn","qualname":"::util::ErrorKind::LengthValueFn","value":"ErrorKind::LengthValueFn","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1307},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26136,"byte_end":26139,"line_start":453,"line_end":453,"column_start":3,"column_end":6},"name":"Eof","qualname":"::util::ErrorKind::Eof","value":"ErrorKind::Eof","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1309},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26143,"byte_end":26150,"line_start":454,"line_end":454,"column_start":3,"column_end":10},"name":"ExprOpt","qualname":"::util::ErrorKind::ExprOpt","value":"ErrorKind::ExprOpt","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1311},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26154,"byte_end":26161,"line_start":455,"line_end":455,"column_start":3,"column_end":10},"name":"ExprRes","qualname":"::util::ErrorKind::ExprRes","value":"ErrorKind::ExprRes","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1313},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26165,"byte_end":26175,"line_start":456,"line_end":456,"column_start":3,"column_end":13},"name":"CondReduce","qualname":"::util::ErrorKind::CondReduce","value":"ErrorKind::CondReduce","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1315},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26179,"byte_end":26185,"line_start":457,"line_end":457,"column_start":3,"column_end":9},"name":"Switch","qualname":"::util::ErrorKind::Switch","value":"ErrorKind::Switch","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1317},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26189,"byte_end":26196,"line_start":458,"line_end":458,"column_start":3,"column_end":10},"name":"TagBits","qualname":"::util::ErrorKind::TagBits","value":"ErrorKind::TagBits","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1319},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26200,"byte_end":26205,"line_start":459,"line_end":459,"column_start":3,"column_end":8},"name":"OneOf","qualname":"::util::ErrorKind::OneOf","value":"ErrorKind::OneOf","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1321},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26209,"byte_end":26215,"line_start":460,"line_end":460,"column_start":3,"column_end":9},"name":"NoneOf","qualname":"::util::ErrorKind::NoneOf","value":"ErrorKind::NoneOf","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1323},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26219,"byte_end":26223,"line_start":461,"line_end":461,"column_start":3,"column_end":7},"name":"Char","qualname":"::util::ErrorKind::Char","value":"ErrorKind::Char","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1325},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26227,"byte_end":26231,"line_start":462,"line_end":462,"column_start":3,"column_end":7},"name":"CrLf","qualname":"::util::ErrorKind::CrLf","value":"ErrorKind::CrLf","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1327},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26235,"byte_end":26246,"line_start":463,"line_end":463,"column_start":3,"column_end":14},"name":"RegexpMatch","qualname":"::util::ErrorKind::RegexpMatch","value":"ErrorKind::RegexpMatch","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1329},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26250,"byte_end":26263,"line_start":464,"line_end":464,"column_start":3,"column_end":16},"name":"RegexpMatches","qualname":"::util::ErrorKind::RegexpMatches","value":"ErrorKind::RegexpMatches","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1331},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26267,"byte_end":26277,"line_start":465,"line_end":465,"column_start":3,"column_end":13},"name":"RegexpFind","qualname":"::util::ErrorKind::RegexpFind","value":"ErrorKind::RegexpFind","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1333},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26281,"byte_end":26294,"line_start":466,"line_end":466,"column_start":3,"column_end":16},"name":"RegexpCapture","qualname":"::util::ErrorKind::RegexpCapture","value":"ErrorKind::RegexpCapture","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1335},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26298,"byte_end":26312,"line_start":467,"line_end":467,"column_start":3,"column_end":17},"name":"RegexpCaptures","qualname":"::util::ErrorKind::RegexpCaptures","value":"ErrorKind::RegexpCaptures","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1337},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26316,"byte_end":26326,"line_start":468,"line_end":468,"column_start":3,"column_end":13},"name":"TakeWhile1","qualname":"::util::ErrorKind::TakeWhile1","value":"ErrorKind::TakeWhile1","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1339},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26330,"byte_end":26338,"line_start":469,"line_end":469,"column_start":3,"column_end":11},"name":"Complete","qualname":"::util::ErrorKind::Complete","value":"ErrorKind::Complete","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1341},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26342,"byte_end":26345,"line_start":470,"line_end":470,"column_start":3,"column_end":6},"name":"Fix","qualname":"::util::ErrorKind::Fix","value":"ErrorKind::Fix","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1343},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26349,"byte_end":26356,"line_start":471,"line_end":471,"column_start":3,"column_end":10},"name":"Escaped","qualname":"::util::ErrorKind::Escaped","value":"ErrorKind::Escaped","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1345},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26360,"byte_end":26376,"line_start":472,"line_end":472,"column_start":3,"column_end":19},"name":"EscapedTransform","qualname":"::util::ErrorKind::EscapedTransform","value":"ErrorKind::EscapedTransform","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1347},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26448,"byte_end":26454,"line_start":474,"line_end":474,"column_start":3,"column_end":9},"name":"TagStr","qualname":"::util::ErrorKind::TagStr","value":"ErrorKind::TagStr","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"4.0.0\", note = \"Please use `Tag` instead\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26380,"byte_end":26445,"line_start":473,"line_end":473,"column_start":3,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1349},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26528,"byte_end":26536,"line_start":476,"line_end":476,"column_start":3,"column_end":11},"name":"IsNotStr","qualname":"::util::ErrorKind::IsNotStr","value":"ErrorKind::IsNotStr","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"4.0.0\", note = \"Please use `IsNot` instead\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26458,"byte_end":26525,"line_start":475,"line_end":475,"column_start":3,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1351},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26608,"byte_end":26614,"line_start":478,"line_end":478,"column_start":3,"column_end":9},"name":"IsAStr","qualname":"::util::ErrorKind::IsAStr","value":"ErrorKind::IsAStr","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"4.0.0\", note = \"Please use `IsA` instead\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26540,"byte_end":26605,"line_start":477,"line_end":477,"column_start":3,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1353},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26693,"byte_end":26706,"line_start":480,"line_end":480,"column_start":3,"column_end":16},"name":"TakeWhile1Str","qualname":"::util::ErrorKind::TakeWhile1Str","value":"ErrorKind::TakeWhile1Str","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"4.0.0\", note = \"Please use `TakeWhile1` instead\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26618,"byte_end":26690,"line_start":479,"line_end":479,"column_start":3,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1355},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26710,"byte_end":26718,"line_start":481,"line_end":481,"column_start":3,"column_end":11},"name":"NonEmpty","qualname":"::util::ErrorKind::NonEmpty","value":"ErrorKind::NonEmpty","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1357},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26722,"byte_end":26728,"line_start":482,"line_end":482,"column_start":3,"column_end":9},"name":"ManyMN","qualname":"::util::ErrorKind::ManyMN","value":"ErrorKind::ManyMN","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1359},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26816,"byte_end":26838,"line_start":484,"line_end":484,"column_start":3,"column_end":25},"name":"TakeUntilAndConsumeStr","qualname":"::util::ErrorKind::TakeUntilAndConsumeStr","value":"ErrorKind::TakeUntilAndConsumeStr","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"4.0.0\", note =\n             \"Please use `TakeUntilAndConsume` instead\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26732,"byte_end":26813,"line_start":483,"line_end":483,"column_start":3,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1361},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26916,"byte_end":26928,"line_start":486,"line_end":486,"column_start":3,"column_end":15},"name":"TakeUntilStr","qualname":"::util::ErrorKind::TakeUntilStr","value":"ErrorKind::TakeUntilStr","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"4.0.0\", note = \"Please use `TakeUntil` instead\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26842,"byte_end":26913,"line_start":485,"line_end":485,"column_start":3,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1363},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26932,"byte_end":26935,"line_start":487,"line_end":487,"column_start":3,"column_end":6},"name":"Not","qualname":"::util::ErrorKind::Not","value":"ErrorKind::Not","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1365},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26939,"byte_end":26950,"line_start":488,"line_end":488,"column_start":3,"column_end":14},"name":"Permutation","qualname":"::util::ErrorKind::Permutation","value":"ErrorKind::Permutation","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1367},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26954,"byte_end":26960,"line_start":489,"line_end":489,"column_start":3,"column_end":9},"name":"Verify","qualname":"::util::ErrorKind::Verify","value":"ErrorKind::Verify","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1369},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26964,"byte_end":26973,"line_start":490,"line_end":490,"column_start":3,"column_end":12},"name":"TakeTill1","qualname":"::util::ErrorKind::TakeTill1","value":"ErrorKind::TakeTill1","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1371},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":26977,"byte_end":26997,"line_start":491,"line_end":491,"column_start":3,"column_end":23},"name":"TakeUntilAndConsume1","qualname":"::util::ErrorKind::TakeUntilAndConsume1","value":"ErrorKind::TakeUntilAndConsume1","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1373},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":27001,"byte_end":27012,"line_start":492,"line_end":492,"column_start":3,"column_end":14},"name":"TakeWhileMN","qualname":"::util::ErrorKind::TakeWhileMN","value":"ErrorKind::TakeWhileMN","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1375},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":27016,"byte_end":27023,"line_start":493,"line_end":493,"column_start":3,"column_end":10},"name":"ParseTo","qualname":"::util::ErrorKind::ParseTo","value":"ErrorKind::ParseTo","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1250},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25758,"byte_end":25767,"line_start":425,"line_end":425,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::util::ErrorKind","value":"pub enum ErrorKind<E = u32> {\n    Custom(E),\n    Tag,\n    MapRes,\n    MapOpt,\n    Alt,\n    IsNot,\n    IsA,\n    SeparatedList,\n    SeparatedNonEmptyList,\n    Many0,\n    Many1,\n    ManyTill,\n    Count,\n    TakeUntilAndConsume,\n    TakeUntil,\n    TakeUntilEitherAndConsume,\n    TakeUntilEither,\n    LengthValue,\n    TagClosure,\n    Alpha,\n    Digit,\n    HexDigit,\n    OctDigit,\n    AlphaNumeric,\n    Space,\n    MultiSpace,\n    LengthValueFn,\n    Eof,\n    ExprOpt,\n    ExprRes,\n    CondReduce,\n    Switch,\n    TagBits,\n    OneOf,\n    NoneOf,\n    Char,\n    CrLf,\n    RegexpMatch,\n    RegexpMatches,\n    RegexpFind,\n    RegexpCapture,\n    RegexpCaptures,\n    TakeWhile1,\n    Complete,\n    Fix,\n    Escaped,\n    EscapedTransform,\n    TagStr,\n    IsNotStr,\n    IsAStr,\n    TakeWhile1Str,\n    NonEmpty,\n    ManyMN,\n    TakeUntilAndConsumeStr,\n    TakeUntilStr,\n    Not,\n    Permutation,\n    Verify,\n    TakeTill1,\n    TakeUntilAndConsume1,\n    TakeWhileMN,\n    ParseTo,\n}","parent":null,"children":[{"krate":0,"index":1252},{"krate":0,"index":1255},{"krate":0,"index":1257},{"krate":0,"index":1259},{"krate":0,"index":1261},{"krate":0,"index":1263},{"krate":0,"index":1265},{"krate":0,"index":1267},{"krate":0,"index":1269},{"krate":0,"index":1271},{"krate":0,"index":1273},{"krate":0,"index":1275},{"krate":0,"index":1277},{"krate":0,"index":1279},{"krate":0,"index":1281},{"krate":0,"index":1283},{"krate":0,"index":1285},{"krate":0,"index":1287},{"krate":0,"index":1289},{"krate":0,"index":1291},{"krate":0,"index":1293},{"krate":0,"index":1295},{"krate":0,"index":1297},{"krate":0,"index":1299},{"krate":0,"index":1301},{"krate":0,"index":1303},{"krate":0,"index":1305},{"krate":0,"index":1307},{"krate":0,"index":1309},{"krate":0,"index":1311},{"krate":0,"index":1313},{"krate":0,"index":1315},{"krate":0,"index":1317},{"krate":0,"index":1319},{"krate":0,"index":1321},{"krate":0,"index":1323},{"krate":0,"index":1325},{"krate":0,"index":1327},{"krate":0,"index":1329},{"krate":0,"index":1331},{"krate":0,"index":1333},{"krate":0,"index":1335},{"krate":0,"index":1337},{"krate":0,"index":1339},{"krate":0,"index":1341},{"krate":0,"index":1343},{"krate":0,"index":1345},{"krate":0,"index":1347},{"krate":0,"index":1349},{"krate":0,"index":1351},{"krate":0,"index":1353},{"krate":0,"index":1355},{"krate":0,"index":1357},{"krate":0,"index":1359},{"krate":0,"index":1361},{"krate":0,"index":1363},{"krate":0,"index":1365},{"krate":0,"index":1367},{"krate":0,"index":1369},{"krate":0,"index":1371},{"krate":0,"index":1373},{"krate":0,"index":1375}],"decl_id":null,"docs":" indicates which parser returned an error\n","sig":null,"attributes":[{"value":"/ indicates which parser returned an error","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25607,"byte_end":25651,"line_start":421,"line_end":421,"column_start":1,"column_end":45}},{"value":"allow(deprecated)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":25728,"byte_end":25748,"line_start":424,"line_end":424,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":99},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":27091,"byte_end":27103,"line_start":498,"line_end":498,"column_start":8,"column_end":20},"name":"error_to_u32","qualname":"::util::error_to_u32","value":"pub fn error_to_u32<E>(&ErrorKind<E>) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":27063,"byte_end":27083,"line_start":497,"line_end":497,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":30212,"byte_end":30223,"line_start":568,"line_end":568,"column_start":10,"column_end":21},"name":"description","qualname":"<ErrorKind<E>>::description","value":"pub fn description(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":30182,"byte_end":30202,"line_start":567,"line_end":567,"column_start":3,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":34332,"byte_end":34347,"line_start":638,"line_end":638,"column_start":10,"column_end":25},"name":"into_error_kind","qualname":"<ErrorKind<E>>::into_error_kind","value":"pub fn into_error_kind(Self) -> ErrorKind<E>","parent":null,"children":[],"decl_id":null,"docs":" Convert Err into an ErrorKind.","sig":null,"attributes":[{"value":"/ Convert Err into an ErrorKind.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":34162,"byte_end":34196,"line_start":635,"line_end":635,"column_start":3,"column_end":37}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":34199,"byte_end":34202,"line_start":636,"line_end":636,"column_start":3,"column_end":6}},{"value":"/ This allows application code to use ErrorKind and stay independent from the `verbose-errors` features activation.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":34205,"byte_end":34322,"line_start":637,"line_end":637,"column_start":3,"column_end":120}}]},{"kind":"Trait","id":{"krate":0,"index":105},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":34398,"byte_end":34405,"line_start":643,"line_end":643,"column_start":11,"column_end":18},"name":"Convert","qualname":"::util::Convert","value":"Convert<T>","parent":null,"children":[{"krate":0,"index":107}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":34416,"byte_end":34423,"line_start":644,"line_end":644,"column_start":6,"column_end":13},"name":"convert","qualname":"::util::Convert::convert","value":"pub fn convert(T) -> Self","parent":{"krate":0,"index":105},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":112},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"simple_errors","qualname":"::simple_errors","value":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":1398},{"krate":0,"index":1405},{"krate":0,"index":1409},{"krate":0,"index":1413},{"krate":0,"index":1416},{"krate":0,"index":123},{"krate":0,"index":128},{"krate":0,"index":132},{"krate":0,"index":133}],"decl_id":null,"docs":" Error management","sig":null,"attributes":[{"value":"cfg(not(feature = \"verbose-errors\"))","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14547,"byte_end":14586,"line_start":431,"line_end":431,"column_start":1,"column_end":40}},{"value":"macro_use","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14587,"byte_end":14599,"line_start":432,"line_end":432,"column_start":1,"column_end":13}},{"value":"/ Error management","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":38853,"byte_end":38873,"line_start":1,"line_end":1,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":38874,"byte_end":38877,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Depending on a compilation flag, the content of the `Context` enum","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":38878,"byte_end":38948,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"/ can change. In the default case, it will only have one variant:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":38949,"byte_end":39016,"line_start":4,"line_end":4,"column_start":1,"column_end":68}},{"value":"/ `Context::Code(I, ErrorKind<E=u32>)` (with `I` and `E` configurable).","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39017,"byte_end":39090,"line_start":5,"line_end":5,"column_start":1,"column_end":74}},{"value":"/ It contains an error code and the input position that triggered it.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39091,"byte_end":39162,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39163,"byte_end":39166,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ If you activate the `verbose-errors` compilation flags, it will add another","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39167,"byte_end":39246,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ variant to the enum: `Context::List(Vec<(I, ErrorKind<E>)>)`.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39247,"byte_end":39312,"line_start":9,"line_end":9,"column_start":1,"column_end":66}},{"value":"/ This variant aggregates positions and error codes as the code backtracks","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39313,"byte_end":39389,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ through the nested parsers.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39390,"byte_end":39421,"line_start":11,"line_end":11,"column_start":1,"column_end":32}},{"value":"/ The verbose errors feature allows for very flexible error management:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39422,"byte_end":39495,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/ you can know precisely which parser got to which part of the input.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39496,"byte_end":39567,"line_start":13,"line_end":13,"column_start":1,"column_end":72}},{"value":"/ The main drawback is that it is a lot slower than default error","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39568,"byte_end":39635,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ management.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39636,"byte_end":39651,"line_start":15,"line_end":15,"column_start":1,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1401},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39782,"byte_end":39786,"line_start":21,"line_end":21,"column_start":3,"column_end":7},"name":"Code","qualname":"::simple_errors::Context::Code","value":"Context::Code(I, ErrorKind<E>)","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1398},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39758,"byte_end":39765,"line_start":20,"line_end":20,"column_start":10,"column_end":17},"name":"Context","qualname":"::simple_errors::Context","value":"pub enum Context<I, E = u32> { Code(I, ErrorKind<E>), }","parent":null,"children":[{"krate":0,"index":1401}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":40194,"byte_end":40209,"line_start":36,"line_end":36,"column_start":10,"column_end":25},"name":"into_error_kind","qualname":"<Context<I, E>>::into_error_kind","value":"pub fn into_error_kind(Self) -> ErrorKind<E>","parent":null,"children":[],"decl_id":null,"docs":" Convert Err into ErrorKind.","sig":null,"attributes":[{"value":"/ Convert Err into ErrorKind.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":40029,"byte_end":40060,"line_start":33,"line_end":33,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":40063,"byte_end":40066,"line_start":34,"line_end":34,"column_start":3,"column_end":6}},{"value":"/ This allows application code to use ErrorKind and stay independent from the verbose-errors features activation.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":40069,"byte_end":40184,"line_start":35,"line_end":35,"column_start":3,"column_end":118}}]},{"kind":"Type","id":{"krate":0,"index":139},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":45734,"byte_end":45741,"line_start":18,"line_end":18,"column_start":10,"column_end":17},"name":"IResult","qualname":"::internal::IResult","value":"Result<(I, O), Err<I, E>>","parent":null,"children":[],"decl_id":null,"docs":" Holds the result of parsing functions","sig":null,"attributes":[{"value":"/ Holds the result of parsing functions","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":45386,"byte_end":45427,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":45428,"byte_end":45431,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ It depends on I, the input type, O, the output type, and E, the error type (by default u32)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":45432,"byte_end":45527,"line_start":13,"line_end":13,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":45528,"byte_end":45531,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The `Ok` side is an enum containing the remainder of the input (the part of the data that","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":45532,"byte_end":45625,"line_start":15,"line_end":15,"column_start":1,"column_end":94}},{"value":"/ was not parsed) and the produced value. The `Err` side contains an instance of `nom::Err`.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":45626,"byte_end":45720,"line_start":16,"line_end":16,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":45721,"byte_end":45724,"line_start":17,"line_end":17,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1422},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":45977,"byte_end":45984,"line_start":24,"line_end":24,"column_start":3,"column_end":10},"name":"Unknown","qualname":"::internal::Needed::Unknown","value":"Needed::Unknown","parent":{"krate":0,"index":1421},"children":[],"decl_id":null,"docs":" needs more data, but we do not know how much\n","sig":null,"attributes":[{"value":"/ needs more data, but we do not know how much","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":45926,"byte_end":45974,"line_start":23,"line_end":23,"column_start":3,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1424},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46026,"byte_end":46030,"line_start":26,"line_end":26,"column_start":3,"column_end":7},"name":"Size","qualname":"::internal::Needed::Size","value":"Needed::Size(usize)","parent":{"krate":0,"index":1421},"children":[],"decl_id":null,"docs":" contains the required data size\n","sig":null,"attributes":[{"value":"/ contains the required data size","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":45988,"byte_end":46023,"line_start":25,"line_end":25,"column_start":3,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":1421},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":45915,"byte_end":45921,"line_start":22,"line_end":22,"column_start":10,"column_end":16},"name":"Needed","qualname":"::internal::Needed","value":"pub enum Needed { Unknown, Size(usize), }","parent":null,"children":[{"krate":0,"index":1422},{"krate":0,"index":1424}],"decl_id":null,"docs":" Contains information on needed data if a parser returned `Incomplete`\n","sig":null,"attributes":[{"value":"/ Contains information on needed data if a parser returned `Incomplete`","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":45787,"byte_end":45860,"line_start":20,"line_end":20,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46065,"byte_end":46073,"line_start":30,"line_end":30,"column_start":10,"column_end":18},"name":"is_known","qualname":"<Needed>::is_known","value":"pub fn is_known(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46223,"byte_end":46226,"line_start":36,"line_end":36,"column_start":10,"column_end":13},"name":"map","qualname":"<Needed>::map","value":"pub fn map<F: FnOnce(usize) -> usize>(Self, F) -> Needed","parent":null,"children":[],"decl_id":null,"docs":" Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.\n","sig":null,"attributes":[{"value":"/ Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46119,"byte_end":46201,"line_start":34,"line_end":34,"column_start":3,"column_end":85}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46204,"byte_end":46213,"line_start":35,"line_end":35,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1442},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":48035,"byte_end":48045,"line_start":74,"line_end":74,"column_start":3,"column_end":13},"name":"Incomplete","qualname":"::internal::Err::Incomplete","value":"Err::Incomplete(Needed)","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" There was not enough data\n","sig":null,"attributes":[{"value":"/ There was not enough data","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":48003,"byte_end":48032,"line_start":73,"line_end":73,"column_start":3,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1445},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":48101,"byte_end":48106,"line_start":76,"line_end":76,"column_start":3,"column_end":8},"name":"Error","qualname":"::internal::Err::Error","value":"Err::Error(Context<I, E>)","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" The parser had an error (recoverable)\n","sig":null,"attributes":[{"value":"/ The parser had an error (recoverable)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":48057,"byte_end":48098,"line_start":75,"line_end":75,"column_start":3,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1448},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":48281,"byte_end":48288,"line_start":80,"line_end":80,"column_start":3,"column_end":10},"name":"Failure","qualname":"::internal::Err::Failure","value":"Err::Failure(Context<I, E>)","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" The parser had an unrecoverable error: we got to the right\n branch and we know other branches won't work, so backtrack\n as fast as possible\n","sig":null,"attributes":[{"value":"/ The parser had an unrecoverable error: we got to the right","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":48125,"byte_end":48187,"line_start":77,"line_end":77,"column_start":3,"column_end":65}},{"value":"/ branch and we know other branches won't work, so backtrack","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":48190,"byte_end":48252,"line_start":78,"line_end":78,"column_start":3,"column_end":65}},{"value":"/ as fast as possible","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":48255,"byte_end":48278,"line_start":79,"line_end":79,"column_start":3,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":1439},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47983,"byte_end":47986,"line_start":72,"line_end":72,"column_start":10,"column_end":13},"name":"Err","qualname":"::internal::Err","value":"pub enum Err<I, E = u32> {\n    Incomplete(Needed),\n    Error(Context<I, E>),\n    Failure(Context<I, E>),\n}","parent":null,"children":[{"krate":0,"index":1442},{"krate":0,"index":1445},{"krate":0,"index":1448}],"decl_id":null,"docs":" The `Err` enum indicates the parser was not successful","sig":null,"attributes":[{"value":"/ The `Err` enum indicates the parser was not successful","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46363,"byte_end":46421,"line_start":44,"line_end":44,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46422,"byte_end":46425,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ It has three cases:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46426,"byte_end":46449,"line_start":46,"line_end":46,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46450,"byte_end":46453,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ * `Incomplete` indicates that more data is needed to decide. The `Needed` enum","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46454,"byte_end":46536,"line_start":48,"line_end":48,"column_start":1,"column_end":83}},{"value":"/ can contain how many additional bytes are necessary. If you are sure your parser","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46537,"byte_end":46621,"line_start":49,"line_end":49,"column_start":1,"column_end":85}},{"value":"/ is working on full data, you can wrap your parser with the `complete` combinator","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46622,"byte_end":46706,"line_start":50,"line_end":50,"column_start":1,"column_end":85}},{"value":"/ to transform that case in `Error`","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46707,"byte_end":46744,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ * `Error` means some parser did not succeed, but another one might (as an example,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46745,"byte_end":46831,"line_start":52,"line_end":52,"column_start":1,"column_end":87}},{"value":"/ when testing different branches of an `alt` combinator)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46832,"byte_end":46891,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/ * `Failure` indicates an unrecoverable error. As an example, if you recognize a prefix","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46892,"byte_end":46982,"line_start":54,"line_end":54,"column_start":1,"column_end":91}},{"value":"/ to decide on the next parser to apply, and that parser fails, you know there's no need","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46983,"byte_end":47073,"line_start":55,"line_end":55,"column_start":1,"column_end":91}},{"value":"/ to try other parsers, you were already in the right branch, so the data is invalid","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47074,"byte_end":47160,"line_start":56,"line_end":56,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47161,"byte_end":47164,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Depending on a compilation flag, the content of the `Context` enum","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47165,"byte_end":47235,"line_start":58,"line_end":58,"column_start":1,"column_end":71}},{"value":"/ can change. In the default case, it will only have one variant:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47236,"byte_end":47303,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ `Context::Code(I, ErrorKind<E=u32>)` (with `I` and `E` configurable).","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47304,"byte_end":47377,"line_start":60,"line_end":60,"column_start":1,"column_end":74}},{"value":"/ It contains an error code and the input position that triggered it.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47378,"byte_end":47449,"line_start":61,"line_end":61,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47450,"byte_end":47453,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ If you activate the `verbose-errors` compilation flags, it will add another","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47454,"byte_end":47533,"line_start":63,"line_end":63,"column_start":1,"column_end":80}},{"value":"/ variant to the enum: `Context::List(Vec<(I, ErrorKind<E>)>)`.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47534,"byte_end":47599,"line_start":64,"line_end":64,"column_start":1,"column_end":66}},{"value":"/ This variant aggregates positions and error codes as the code backtracks","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47600,"byte_end":47676,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/ through the nested parsers.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47677,"byte_end":47708,"line_start":66,"line_end":66,"column_start":1,"column_end":32}},{"value":"/ The verbose errors feature allows for very flexible error management:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47709,"byte_end":47782,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ you can know precisely which parser got to which part of the input.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47783,"byte_end":47854,"line_start":68,"line_end":68,"column_start":1,"column_end":72}},{"value":"/ The main drawback is that it is a lot slower than default error","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47855,"byte_end":47922,"line_start":69,"line_end":69,"column_start":1,"column_end":68}},{"value":"/ management.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":47923,"byte_end":47938,"line_start":70,"line_end":70,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":49466,"byte_end":49481,"line_start":133,"line_end":133,"column_start":10,"column_end":25},"name":"into_error_kind","qualname":"<Err<I, E>>::into_error_kind","value":"pub fn into_error_kind(Self) -> ::util::ErrorKind<E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":49698,"byte_end":49711,"line_start":141,"line_end":141,"column_start":10,"column_end":23},"name":"is_incomplete","qualname":"<Err<I, E>>::is_incomplete","value":"pub fn is_incomplete(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":237},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":60416,"byte_end":60427,"line_start":28,"line_end":28,"column_start":11,"column_end":22},"name":"InputLength","qualname":"::traits::InputLength","value":"InputLength","parent":null,"children":[{"krate":0,"index":238}],"decl_id":null,"docs":" abstract method to calculate the input length\n","sig":null,"attributes":[{"value":"/ abstract method to calculate the input length","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":60356,"byte_end":60405,"line_start":27,"line_end":27,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":60547,"byte_end":60556,"line_start":32,"line_end":32,"column_start":6,"column_end":15},"name":"input_len","qualname":"::traits::InputLength::input_len","value":"pub fn input_len(&Self) -> usize","parent":{"krate":0,"index":237},"children":[],"decl_id":null,"docs":" calculates the input length, as indicated by its name,\n and the name of the trait itself\n","sig":null,"attributes":[{"value":"/ calculates the input length, as indicated by its name,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":60432,"byte_end":60490,"line_start":29,"line_end":29,"column_start":3,"column_end":61}},{"value":"/ and the name of the trait itself","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":60493,"byte_end":60529,"line_start":30,"line_end":30,"column_start":3,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":60532,"byte_end":60541,"line_start":31,"line_end":31,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":249},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":61131,"byte_end":61137,"line_start":59,"line_end":59,"column_start":11,"column_end":17},"name":"Offset","qualname":"::traits::Offset","value":"Offset","parent":null,"children":[{"krate":0,"index":250}],"decl_id":null,"docs":" useful functions to calculate the offset between slices and show a hexdump of a slice\n","sig":null,"attributes":[{"value":"/ useful functions to calculate the offset between slices and show a hexdump of a slice","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":61031,"byte_end":61120,"line_start":58,"line_end":58,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":61224,"byte_end":61230,"line_start":61,"line_end":61,"column_start":6,"column_end":12},"name":"offset","qualname":"::traits::Offset::offset","value":"pub fn offset(&Self, &Self) -> usize","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" offset between the first byte of self and the first byte of the argument\n","sig":null,"attributes":[{"value":"/ offset between the first byte of self and the first byte of the argument","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":61142,"byte_end":61218,"line_start":60,"line_end":60,"column_start":3,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":261},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":62003,"byte_end":62010,"line_start":101,"line_end":101,"column_start":11,"column_end":18},"name":"AsBytes","qualname":"::traits::AsBytes","value":"AsBytes","parent":null,"children":[{"krate":0,"index":262}],"decl_id":null,"docs":" casts the input type to a byte slice\n","sig":null,"attributes":[{"value":"/ casts the input type to a byte slice","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":61952,"byte_end":61992,"line_start":100,"line_end":100,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":62018,"byte_end":62026,"line_start":102,"line_end":102,"column_start":6,"column_end":14},"name":"as_bytes","qualname":"::traits::AsBytes::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":261},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":274},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63032,"byte_end":63038,"line_start":161,"line_end":161,"column_start":11,"column_end":17},"name":"AsChar","qualname":"::traits::AsChar","value":"AsChar","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"decl_id":null,"docs":" transforms common types to a char for basic token parsing\n","sig":null,"attributes":[{"value":"/ transforms common types to a char for basic token parsing","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":62960,"byte_end":63021,"line_start":160,"line_end":160,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63087,"byte_end":63094,"line_start":164,"line_end":164,"column_start":6,"column_end":13},"name":"as_char","qualname":"::traits::AsChar::as_char","value":"pub fn as_char(Self) -> char","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" makes a char from self\n","sig":null,"attributes":[{"value":"/ makes a char from self","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63043,"byte_end":63069,"line_start":162,"line_end":162,"column_start":3,"column_end":29}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63072,"byte_end":63081,"line_start":163,"line_end":163,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63283,"byte_end":63291,"line_start":171,"line_end":171,"column_start":6,"column_end":14},"name":"is_alpha","qualname":"::traits::AsChar::is_alpha","value":"pub fn is_alpha(Self) -> bool","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" tests that self is an alphabetic character","sig":null,"attributes":[{"value":"/ tests that self is an alphabetic character","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63113,"byte_end":63159,"line_start":166,"line_end":166,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63162,"byte_end":63165,"line_start":167,"line_end":167,"column_start":3,"column_end":6}},{"value":"/ warning: for `&str` it recognizes alphabetic","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63168,"byte_end":63216,"line_start":168,"line_end":168,"column_start":3,"column_end":51}},{"value":"/ characters outside of the 52 ASCII letters","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63219,"byte_end":63265,"line_start":169,"line_end":169,"column_start":3,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63268,"byte_end":63277,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63399,"byte_end":63410,"line_start":176,"line_end":176,"column_start":6,"column_end":17},"name":"is_alphanum","qualname":"::traits::AsChar::is_alphanum","value":"pub fn is_alphanum(Self) -> bool","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" tests that self is an alphabetic character\n or a decimal digit\n","sig":null,"attributes":[{"value":"/ tests that self is an alphabetic character","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63310,"byte_end":63356,"line_start":173,"line_end":173,"column_start":3,"column_end":49}},{"value":"/ or a decimal digit","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63359,"byte_end":63381,"line_start":174,"line_end":174,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63384,"byte_end":63393,"line_start":175,"line_end":175,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63484,"byte_end":63496,"line_start":179,"line_end":179,"column_start":6,"column_end":18},"name":"is_dec_digit","qualname":"::traits::AsChar::is_dec_digit","value":"pub fn is_dec_digit(Self) -> bool","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" tests that self is a decimal digit\n","sig":null,"attributes":[{"value":"/ tests that self is a decimal digit","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63428,"byte_end":63466,"line_start":177,"line_end":177,"column_start":3,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63469,"byte_end":63478,"line_start":178,"line_end":178,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63567,"byte_end":63579,"line_start":182,"line_end":182,"column_start":6,"column_end":18},"name":"is_hex_digit","qualname":"::traits::AsChar::is_hex_digit","value":"pub fn is_hex_digit(Self) -> bool","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" tests that self is an hex digit\n","sig":null,"attributes":[{"value":"/ tests that self is an hex digit","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63514,"byte_end":63549,"line_start":180,"line_end":180,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63552,"byte_end":63561,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63652,"byte_end":63664,"line_start":185,"line_end":185,"column_start":6,"column_end":18},"name":"is_oct_digit","qualname":"::traits::AsChar::is_oct_digit","value":"pub fn is_oct_digit(Self) -> bool","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" tests that self is an octal digit\n","sig":null,"attributes":[{"value":"/ tests that self is an octal digit","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63597,"byte_end":63634,"line_start":183,"line_end":183,"column_start":3,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63637,"byte_end":63646,"line_start":184,"line_end":184,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63734,"byte_end":63737,"line_start":188,"line_end":188,"column_start":6,"column_end":9},"name":"len","qualname":"::traits::AsChar::len","value":"pub fn len(Self) -> usize","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" gets the len in bytes for self\n","sig":null,"attributes":[{"value":"/ gets the len in bytes for self","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63682,"byte_end":63716,"line_start":186,"line_end":186,"column_start":3,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":63719,"byte_end":63728,"line_start":187,"line_end":187,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":316},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66607,"byte_end":66616,"line_start":326,"line_end":326,"column_start":11,"column_end":20},"name":"InputIter","qualname":"::traits::InputIter","value":"InputIter","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":325}],"decl_id":null,"docs":" abstracts common iteration operations on the input type","sig":null,"attributes":[{"value":"/ abstracts common iteration operations on the input type","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66435,"byte_end":66494,"line_start":322,"line_end":322,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66495,"byte_end":66498,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ it needs a distinction between `Item` and `RawItem` because","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66499,"byte_end":66562,"line_start":324,"line_end":324,"column_start":1,"column_end":64}},{"value":"/ `&[T]` iterates on references","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66563,"byte_end":66596,"line_start":325,"line_end":325,"column_start":1,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":317},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66626,"byte_end":66630,"line_start":327,"line_end":327,"column_start":8,"column_end":12},"name":"Item","qualname":"::traits::InputIter::Item","value":"type Item;","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":318},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66639,"byte_end":66646,"line_start":328,"line_end":328,"column_start":8,"column_end":15},"name":"RawItem","qualname":"::traits::InputIter::RawItem","value":"type RawItem;","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":319},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66655,"byte_end":66659,"line_start":329,"line_end":329,"column_start":8,"column_end":12},"name":"Iter","qualname":"::traits::InputIter::Iter","value":"type Iter: Iterator<Item = (usize, Self::Item)>;","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":320},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66706,"byte_end":66714,"line_start":330,"line_end":330,"column_start":8,"column_end":16},"name":"IterElem","qualname":"::traits::InputIter::IterElem","value":"type IterElem: Iterator<Item = Self::Item>;","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66818,"byte_end":66830,"line_start":333,"line_end":333,"column_start":6,"column_end":18},"name":"iter_indices","qualname":"::traits::InputIter::iter_indices","value":"pub fn iter_indices(&Self) -> Self::Iter","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":" returns an iterator over the elements and their byte offsets\n","sig":null,"attributes":[{"value":"/ returns an iterator over the elements and their byte offsets","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66748,"byte_end":66812,"line_start":332,"line_end":332,"column_start":3,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66902,"byte_end":66915,"line_start":335,"line_end":335,"column_start":6,"column_end":19},"name":"iter_elements","qualname":"::traits::InputIter::iter_elements","value":"pub fn iter_elements(&Self) -> Self::IterElem","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":" returns an iterator over the elements\n","sig":null,"attributes":[{"value":"/ returns an iterator over the elements","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66855,"byte_end":66896,"line_start":334,"line_end":334,"column_start":3,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66992,"byte_end":67000,"line_start":337,"line_end":337,"column_start":6,"column_end":14},"name":"position","qualname":"::traits::InputIter::position","value":"pub fn position<P>(&Self, P) -> Option<usize> where P: Fn(Self::RawItem) ->\nbool","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":" finds the byte position of the element\n","sig":null,"attributes":[{"value":"/ finds the byte position of the element","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":66944,"byte_end":66986,"line_start":336,"line_end":336,"column_start":3,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":67157,"byte_end":67168,"line_start":341,"line_end":341,"column_start":6,"column_end":17},"name":"slice_index","qualname":"::traits::InputIter::slice_index","value":"pub fn slice_index(&Self, usize) -> Option<usize>","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":" get the byte offset from the element's position in the stream\n","sig":null,"attributes":[{"value":"/ get the byte offset from the element's position in the stream","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":67086,"byte_end":67151,"line_start":340,"line_end":340,"column_start":3,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":326},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":67254,"byte_end":67263,"line_start":345,"line_end":345,"column_start":11,"column_end":20},"name":"InputTake","qualname":"::traits::InputTake","value":"InputTake: Sized","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":328}],"decl_id":null,"docs":" abstracts slicing operations\n","sig":null,"attributes":[{"value":"/ abstracts slicing operations","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":67211,"byte_end":67243,"line_start":344,"line_end":344,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":67343,"byte_end":67347,"line_start":347,"line_end":347,"column_start":6,"column_end":10},"name":"take","qualname":"::traits::InputTake::take","value":"pub fn take(&Self, usize) -> Self","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" returns a slice of `count` bytes. panics if count > length\n","sig":null,"attributes":[{"value":"/ returns a slice of `count` bytes. panics if count > length","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":67275,"byte_end":67337,"line_start":346,"line_end":346,"column_start":3,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":67459,"byte_end":67469,"line_start":349,"line_end":349,"column_start":6,"column_end":16},"name":"take_split","qualname":"::traits::InputTake::take_split","value":"pub fn take_split(&Self, usize) -> (Self, Self)","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" split the stream at the `count` byte offset. panics if count > length\n","sig":null,"attributes":[{"value":"/ split the stream at the `count` byte offset. panics if count > length","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":67380,"byte_end":67453,"line_start":348,"line_end":348,"column_start":3,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":361},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":70065,"byte_end":70083,"line_start":461,"line_end":461,"column_start":11,"column_end":29},"name":"UnspecializedInput","qualname":"::traits::UnspecializedInput","value":"UnspecializedInput","parent":null,"children":[],"decl_id":null,"docs":" Dummy trait used for default implementations (currently only used for `InputTakeAtPosition`).","sig":null,"attributes":[{"value":"/ Dummy trait used for default implementations (currently only used for `InputTakeAtPosition`).","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":69519,"byte_end":69616,"line_start":452,"line_end":452,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":69617,"byte_end":69620,"line_start":453,"line_end":453,"column_start":1,"column_end":4}},{"value":"/ When implementing a custom input type, it is possible to use directly the","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":69621,"byte_end":69698,"line_start":454,"line_end":454,"column_start":1,"column_end":78}},{"value":"/ default implementation: if the input type implements `InputLength`, `InputIter`,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":69699,"byte_end":69783,"line_start":455,"line_end":455,"column_start":1,"column_end":85}},{"value":"/ `InputTake`, `AtEof` and `Clone`, you can implement `UnspecializedInput` and get","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":69784,"byte_end":69868,"line_start":456,"line_end":456,"column_start":1,"column_end":85}},{"value":"/ a default version of `InputTakeAtPosition`.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":69869,"byte_end":69916,"line_start":457,"line_end":457,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":69917,"byte_end":69920,"line_start":458,"line_end":458,"column_start":1,"column_end":4}},{"value":"/ For performance reasons, you might want to write a custom implementation of","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":69921,"byte_end":70000,"line_start":459,"line_end":459,"column_start":1,"column_end":80}},{"value":"/ `InputTakeAtPosition` (like the one for `&[u8]`).","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":70001,"byte_end":70054,"line_start":460,"line_end":460,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":368},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":70335,"byte_end":70354,"line_start":469,"line_end":469,"column_start":11,"column_end":30},"name":"InputTakeAtPosition","qualname":"::traits::InputTakeAtPosition","value":"InputTakeAtPosition: Sized","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":372}],"decl_id":null,"docs":" methods to take as much input as possible until the provided function returns true for the current element","sig":null,"attributes":[{"value":"/ methods to take as much input as possible until the provided function returns true for the current element","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":70143,"byte_end":70253,"line_start":466,"line_end":466,"column_start":1,"column_end":111}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":70254,"byte_end":70257,"line_start":467,"line_end":467,"column_start":1,"column_end":4}},{"value":"/ a large part of nom's basic parsers are built using this trait","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":70258,"byte_end":70324,"line_start":468,"line_end":468,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":369},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":70371,"byte_end":70375,"line_start":470,"line_end":470,"column_start":8,"column_end":12},"name":"Item","qualname":"::traits::InputTakeAtPosition::Item","value":"type Item;","parent":{"krate":0,"index":368},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":70383,"byte_end":70400,"line_start":472,"line_end":472,"column_start":6,"column_end":23},"name":"split_at_position","qualname":"::traits::InputTakeAtPosition::split_at_position","value":"pub fn split_at_position<P>(&Self, P) -> IResult<Self, Self, u32> where\nP: Fn(Self::Item) -> bool","parent":{"krate":0,"index":368},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":70497,"byte_end":70515,"line_start":475,"line_end":475,"column_start":6,"column_end":24},"name":"split_at_position1","qualname":"::traits::InputTakeAtPosition::split_at_position1","value":"pub fn split_at_position1<P>(&Self, P, ErrorKind<u32>)\n-> IResult<Self, Self, u32> where P: Fn(Self::Item) -> bool","parent":{"krate":0,"index":368},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1699},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75654,"byte_end":75656,"line_start":653,"line_end":653,"column_start":3,"column_end":5},"name":"Ok","qualname":"::traits::CompareResult::Ok","value":"CompareResult::Ok","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1701},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75660,"byte_end":75670,"line_start":654,"line_end":654,"column_start":3,"column_end":13},"name":"Incomplete","qualname":"::traits::CompareResult::Incomplete","value":"CompareResult::Incomplete","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1703},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75674,"byte_end":75679,"line_start":655,"line_end":655,"column_start":3,"column_end":8},"name":"Error","qualname":"::traits::CompareResult::Error","value":"CompareResult::Error","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1698},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75636,"byte_end":75649,"line_start":652,"line_end":652,"column_start":10,"column_end":23},"name":"CompareResult","qualname":"::traits::CompareResult","value":"pub enum CompareResult { Ok, Incomplete, Error, }","parent":null,"children":[{"krate":0,"index":1699},{"krate":0,"index":1701},{"krate":0,"index":1703}],"decl_id":null,"docs":" indicates wether a comparison was successful, an error, or\n if more data was needed\n","sig":null,"attributes":[{"value":"/ indicates wether a comparison was successful, an error, or","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75508,"byte_end":75570,"line_start":649,"line_end":649,"column_start":1,"column_end":63}},{"value":"/ if more data was needed","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75571,"byte_end":75598,"line_start":650,"line_end":650,"column_start":1,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":417},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75730,"byte_end":75737,"line_start":659,"line_end":659,"column_start":11,"column_end":18},"name":"Compare","qualname":"::traits::Compare","value":"Compare<T>","parent":null,"children":[{"krate":0,"index":419},{"krate":0,"index":420}],"decl_id":null,"docs":" abstracts comparison operations\n","sig":null,"attributes":[{"value":"/ abstracts comparison operations","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75684,"byte_end":75719,"line_start":658,"line_end":658,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75798,"byte_end":75805,"line_start":661,"line_end":661,"column_start":6,"column_end":13},"name":"compare","qualname":"::traits::Compare::compare","value":"pub fn compare(&Self, T) -> CompareResult","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" compares self to another value for equality\n","sig":null,"attributes":[{"value":"/ compares self to another value for equality","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75745,"byte_end":75792,"line_start":660,"line_end":660,"column_start":3,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":76109,"byte_end":76124,"line_start":669,"line_end":669,"column_start":6,"column_end":21},"name":"compare_no_case","qualname":"::traits::Compare::compare_no_case","value":"pub fn compare_no_case(&Self, T) -> CompareResult","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" compares self to another value for equality\n independently of the case.","sig":null,"attributes":[{"value":"/ compares self to another value for equality","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75839,"byte_end":75886,"line_start":662,"line_end":662,"column_start":3,"column_end":50}},{"value":"/ independently of the case.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75889,"byte_end":75919,"line_start":663,"line_end":663,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75922,"byte_end":75925,"line_start":664,"line_end":664,"column_start":3,"column_end":6}},{"value":"/ warning: for `&str`, the comparison is done","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75928,"byte_end":75975,"line_start":665,"line_end":665,"column_start":3,"column_end":50}},{"value":"/ by lowercasing both strings and comparing","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":75978,"byte_end":76023,"line_start":666,"line_end":666,"column_start":3,"column_end":48}},{"value":"/ the result. This is a temporary solution until","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":76026,"byte_end":76076,"line_start":667,"line_end":667,"column_start":3,"column_end":53}},{"value":"/ a better one appears","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":76079,"byte_end":76103,"line_start":668,"line_end":668,"column_start":3,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":441},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":78981,"byte_end":78990,"line_start":784,"line_end":784,"column_start":11,"column_end":20},"name":"FindToken","qualname":"::traits::FindToken","value":"FindToken<T>","parent":null,"children":[{"krate":0,"index":443}],"decl_id":null,"docs":" look for self in the given input stream\n","sig":null,"attributes":[{"value":"/ look for self in the given input stream","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":78927,"byte_end":78970,"line_start":783,"line_end":783,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":79001,"byte_end":79011,"line_start":785,"line_end":785,"column_start":6,"column_end":16},"name":"find_token","qualname":"::traits::FindToken::find_token","value":"pub fn find_token(&Self, T) -> bool","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":464},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":79945,"byte_end":79958,"line_start":830,"line_end":830,"column_start":11,"column_end":24},"name":"FindSubstring","qualname":"::traits::FindSubstring","value":"FindSubstring<T>","parent":null,"children":[{"krate":0,"index":466}],"decl_id":null,"docs":" look for a substring in self\n","sig":null,"attributes":[{"value":"/ look for a substring in self","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":79902,"byte_end":79934,"line_start":829,"line_end":829,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":79969,"byte_end":79983,"line_start":831,"line_end":831,"column_start":6,"column_end":20},"name":"find_substring","qualname":"::traits::FindSubstring::find_substring","value":"pub fn find_substring(&Self, T) -> Option<usize>","parent":{"krate":0,"index":464},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":479},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":81313,"byte_end":81320,"line_start":885,"line_end":885,"column_start":11,"column_end":18},"name":"ParseTo","qualname":"::traits::ParseTo","value":"ParseTo<R>","parent":null,"children":[{"krate":0,"index":481}],"decl_id":null,"docs":" used to integrate str's parse() method\n","sig":null,"attributes":[{"value":"/ used to integrate str's parse() method","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":81260,"byte_end":81302,"line_start":884,"line_end":884,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":81331,"byte_end":81339,"line_start":886,"line_end":886,"column_start":6,"column_end":14},"name":"parse_to","qualname":"::traits::ParseTo::parse_to","value":"pub fn parse_to(&Self) -> Option<R>","parent":{"krate":0,"index":479},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":491},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":81784,"byte_end":81789,"line_start":906,"line_end":906,"column_start":11,"column_end":16},"name":"Slice","qualname":"::traits::Slice","value":"Slice<R>","parent":null,"children":[{"krate":0,"index":493}],"decl_id":null,"docs":" slicing operations using ranges","sig":null,"attributes":[{"value":"/ slicing operations using ranges","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":81619,"byte_end":81654,"line_start":901,"line_end":901,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":81655,"byte_end":81658,"line_start":902,"line_end":902,"column_start":1,"column_end":4}},{"value":"/ this trait is loosely based on","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":81659,"byte_end":81693,"line_start":903,"line_end":903,"column_start":1,"column_end":35}},{"value":"/ `Index`, but can actually return","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":81694,"byte_end":81730,"line_start":904,"line_end":904,"column_start":1,"column_end":37}},{"value":"/ something else than a `&[T]` or `&str`","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":81731,"byte_end":81773,"line_start":905,"line_end":905,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":81820,"byte_end":81825,"line_start":908,"line_end":908,"column_start":6,"column_end":11},"name":"slice","qualname":"::traits::Slice::slice","value":"pub fn slice(&Self, R) -> Self","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":81797,"byte_end":81814,"line_start":907,"line_end":907,"column_start":3,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":497},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":83512,"byte_end":83517,"line_start":961,"line_end":961,"column_start":11,"column_end":16},"name":"AtEof","qualname":"::traits::AtEof","value":"AtEof","parent":null,"children":[{"krate":0,"index":498}],"decl_id":null,"docs":" indicates whether more data can come later in input","sig":null,"attributes":[{"value":"/ indicates whether more data can come later in input","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":82904,"byte_end":82959,"line_start":950,"line_end":950,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":82960,"byte_end":82963,"line_start":951,"line_end":951,"column_start":1,"column_end":4}},{"value":"/ When working with complete data, like a file that was entirely loaded","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":82964,"byte_end":83037,"line_start":952,"line_end":952,"column_start":1,"column_end":74}},{"value":"/ in memory, you should use input types like `CompleteByteSlice` and","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":83038,"byte_end":83108,"line_start":953,"line_end":953,"column_start":1,"column_end":71}},{"value":"/ `CompleteStr` to wrap the data.  The `at_eof` method of those types","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":83109,"byte_end":83180,"line_start":954,"line_end":954,"column_start":1,"column_end":72}},{"value":"/ always returns true, thus indicating to nom that it should not handle","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":83181,"byte_end":83254,"line_start":955,"line_end":955,"column_start":1,"column_end":74}},{"value":"/ partial data cases.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":83255,"byte_end":83278,"line_start":956,"line_end":956,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":83279,"byte_end":83282,"line_start":957,"line_end":957,"column_start":1,"column_end":4}},{"value":"/ When working will partial data, like data coming from the network in","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":83283,"byte_end":83355,"line_start":958,"line_end":958,"column_start":1,"column_end":73}},{"value":"/ buffers, the `at_eof` method can indicate if we expect more data to come,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":83356,"byte_end":83433,"line_start":959,"line_end":959,"column_start":1,"column_end":78}},{"value":"/ and let nom know that some parsers could still handle more data","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":83434,"byte_end":83501,"line_start":960,"line_end":960,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":83525,"byte_end":83531,"line_start":962,"line_end":962,"column_start":6,"column_end":12},"name":"at_eof","qualname":"::traits::AtEof::at_eof","value":"pub fn at_eof(&Self) -> bool","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":83558,"byte_end":83567,"line_start":965,"line_end":965,"column_start":8,"column_end":17},"name":"need_more","qualname":"::traits::need_more","value":"pub fn need_more<I: AtEof, O, E>(I, Needed) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":503},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":83770,"byte_end":83783,"line_start":973,"line_end":973,"column_start":8,"column_end":21},"name":"need_more_err","qualname":"::traits::need_more_err","value":"pub fn need_more_err<I: AtEof, O, E>(I, Needed, ErrorKind<E>)\n-> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":519},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":85795,"byte_end":85805,"line_start":1064,"line_end":1064,"column_start":11,"column_end":21},"name":"ExtendInto","qualname":"::traits::ExtendInto","value":"ExtendInto","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523}],"decl_id":null,"docs":" abtracts something which can extend an `Extend`\n","sig":null,"attributes":[{"value":"/ abtracts something which can extend an `Extend`","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":85733,"byte_end":85784,"line_start":1063,"line_end":1063,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":520},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":85815,"byte_end":85819,"line_start":1065,"line_end":1065,"column_start":8,"column_end":12},"name":"Item","qualname":"::traits::ExtendInto::Item","value":"type Item;","parent":{"krate":0,"index":519},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":521},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":85828,"byte_end":85836,"line_start":1066,"line_end":1066,"column_start":8,"column_end":16},"name":"Extender","qualname":"::traits::ExtendInto::Extender","value":"type Extender: Extend<Self::Item>;","parent":{"krate":0,"index":519},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":85924,"byte_end":85935,"line_start":1070,"line_end":1070,"column_start":6,"column_end":17},"name":"new_builder","qualname":"::traits::ExtendInto::new_builder","value":"pub fn new_builder(&Self) -> Self::Extender","parent":{"krate":0,"index":519},"children":[],"decl_id":null,"docs":" create a new `Extend` of the correct type\n","sig":null,"attributes":[{"value":"/ create a new `Extend` of the correct type","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":85861,"byte_end":85906,"line_start":1068,"line_end":1068,"column_start":3,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":85909,"byte_end":85918,"line_start":1069,"line_end":1069,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":86026,"byte_end":86037,"line_start":1073,"line_end":1073,"column_start":6,"column_end":17},"name":"extend_into","qualname":"::traits::ExtendInto::extend_into","value":"pub fn extend_into(&Self, &mut Self::Extender)","parent":{"krate":0,"index":519},"children":[],"decl_id":null,"docs":" accumulate the input into an accumulator\n","sig":null,"attributes":[{"value":"/ accumulate the input into an accumulator","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":85964,"byte_end":86008,"line_start":1071,"line_end":1071,"column_start":3,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":86011,"byte_end":86020,"line_start":1072,"line_end":1072,"column_start":3,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":606},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"methods","qualname":"::methods","value":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","parent":null,"children":[{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609}],"decl_id":null,"docs":" Method macro combinators","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14764,"byte_end":14776,"line_start":446,"line_end":446,"column_start":1,"column_end":13}},{"value":"/ Method macro combinators","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254390,"byte_end":254418,"line_start":1,"line_end":1,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254419,"byte_end":254422,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ These macros make parsers as methods of structs","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254423,"byte_end":254474,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ and that can take methods of structs to call","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254475,"byte_end":254523,"line_start":4,"line_end":4,"column_start":1,"column_end":49}},{"value":"/ as parsers.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254524,"byte_end":254539,"line_start":5,"line_end":5,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254540,"byte_end":254543,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ There is a trick to make them easier to assemble,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254544,"byte_end":254597,"line_start":7,"line_end":7,"column_start":1,"column_end":54}},{"value":"/ combinators are defined like this:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254598,"byte_end":254636,"line_start":8,"line_end":8,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254637,"byte_end":254640,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254641,"byte_end":254654,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/ macro_rules! tag (","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254655,"byte_end":254677,"line_start":11,"line_end":11,"column_start":1,"column_end":23}},{"value":"/   ($i:expr, $inp: expr) => (","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254678,"byte_end":254710,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/     {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254711,"byte_end":254720,"line_start":13,"line_end":13,"column_start":1,"column_end":10}},{"value":"/       ...","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254721,"byte_end":254734,"line_start":14,"line_end":14,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254735,"byte_end":254744,"line_start":15,"line_end":15,"column_start":1,"column_end":10}},{"value":"/   );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254745,"byte_end":254753,"line_start":16,"line_end":16,"column_start":1,"column_end":9}},{"value":"/ );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254754,"byte_end":254760,"line_start":17,"line_end":17,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254761,"byte_end":254768,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254769,"byte_end":254772,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ But when used as methods in other combinators, are used","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254773,"byte_end":254832,"line_start":20,"line_end":20,"column_start":1,"column_end":60}},{"value":"/ like this:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254833,"byte_end":254847,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254848,"byte_end":254851,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254852,"byte_end":254865,"line_start":23,"line_end":23,"column_start":1,"column_end":14}},{"value":"/ method!(my_function<Parser<'a> >, self, tag!(\"abcd\"));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254866,"byte_end":254924,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254925,"byte_end":254932,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254933,"byte_end":254936,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Internally, other combinators will rewrite","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254937,"byte_end":254983,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/ that call to pass the input as second argument:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":254984,"byte_end":255035,"line_start":28,"line_end":28,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255036,"byte_end":255039,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255040,"byte_end":255053,"line_start":30,"line_end":30,"column_start":1,"column_end":14}},{"value":"/ macro_rules! method (","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255054,"byte_end":255079,"line_start":31,"line_end":31,"column_start":1,"column_end":26}},{"value":"/   ($name:ident<$a:ty>, $self_:ident, $submac:ident!( $($args:tt)* )) => (","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255080,"byte_end":255157,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/     fn $name( $self_: $a, i: &[u8] ) -> IResult<&[u8], &[u8]> {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255158,"byte_end":255225,"line_start":33,"line_end":33,"column_start":1,"column_end":68}},{"value":"/       $submac!(i, $($args)*)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255226,"byte_end":255258,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255259,"byte_end":255268,"line_start":35,"line_end":35,"column_start":1,"column_end":10}},{"value":"/   );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255269,"byte_end":255277,"line_start":36,"line_end":36,"column_start":1,"column_end":9}},{"value":"/ );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255278,"byte_end":255284,"line_start":37,"line_end":37,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255285,"byte_end":255292,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255293,"byte_end":255296,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ The `method!` macro is similar to the `named!` macro in the macros module.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255297,"byte_end":255375,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/ While `named!` will create a parser function, `method!` will create a parser","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255376,"byte_end":255456,"line_start":41,"line_end":41,"column_start":1,"column_end":81}},{"value":"/ method on the struct it is defined in.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255457,"byte_end":255499,"line_start":42,"line_end":42,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255500,"byte_end":255503,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Compared to the `named!` macro there are a few differences in how they are","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255504,"byte_end":255582,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ invoked. A `method!` invocation always has to have the type of `self`","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255583,"byte_end":255656,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"/ declared and it can't be a reference due to Rust's borrow lifetime","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255657,"byte_end":255727,"line_start":46,"line_end":46,"column_start":1,"column_end":71}},{"value":"/ restrictions:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255728,"byte_end":255745,"line_start":47,"line_end":47,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255746,"byte_end":255749,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255750,"byte_end":255763,"line_start":49,"line_end":49,"column_start":1,"column_end":14}},{"value":"/ //                  -`self`'s type-","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255764,"byte_end":255803,"line_start":50,"line_end":50,"column_start":1,"column_end":40}},{"value":"/ method!(method_name<  Parser<'a> >, ...);","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255804,"byte_end":255849,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255850,"byte_end":255857,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ `self`'s type always comes first.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255858,"byte_end":255895,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/ The next difference is you have to input the self struct. Due to Rust's","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255896,"byte_end":255971,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ macro hygiene the macro can't declare it on it's own.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":255972,"byte_end":256029,"line_start":55,"line_end":55,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256030,"byte_end":256033,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256034,"byte_end":256047,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/ //                                                 -self-","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256048,"byte_end":256109,"line_start":58,"line_end":58,"column_start":1,"column_end":62}},{"value":"/ method!(method_name<Parser<'a>, &'a str, &'a str>, self, ...);","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256110,"byte_end":256176,"line_start":59,"line_end":59,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256177,"byte_end":256184,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ When making a parsing struct with parsing methods, due to the static borrow","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256185,"byte_end":256264,"line_start":61,"line_end":61,"column_start":1,"column_end":80}},{"value":"/ checker,calling any parsing methods on self (or any other parsing struct)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256265,"byte_end":256342,"line_start":62,"line_end":62,"column_start":1,"column_end":78}},{"value":"/ will cause self to be moved for the rest of the method.To get around this","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256343,"byte_end":256420,"line_start":63,"line_end":63,"column_start":1,"column_end":78}},{"value":"/ restriction all self is moved into the called method and then the called","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256421,"byte_end":256497,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/ method will return self to the caller.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256498,"byte_end":256540,"line_start":65,"line_end":65,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256541,"byte_end":256544,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ To call a method on self you need to use the `call_m!` macro. For example:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256545,"byte_end":256623,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256624,"byte_end":256627,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256628,"byte_end":256641,"line_start":69,"line_end":69,"column_start":1,"column_end":14}},{"value":"/ struct<'a> Parser<'a> {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256642,"byte_end":256669,"line_start":70,"line_end":70,"column_start":1,"column_end":28}},{"value":"/   parsed: &'a str,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256670,"byte_end":256692,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/ }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256693,"byte_end":256698,"line_start":72,"line_end":72,"column_start":1,"column_end":6}},{"value":"/ impl<'a> Parser<'a> {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256699,"byte_end":256724,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/   // Constructor omitted for brevity","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256725,"byte_end":256765,"line_start":74,"line_end":74,"column_start":1,"column_end":41}},{"value":"/   method!(take4<Parser<'a>, &'a str, &'a str>, self, take!(4));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256766,"byte_end":256833,"line_start":75,"line_end":75,"column_start":1,"column_end":68}},{"value":"/   method!(caller<Parser<'a>, &'a str, &'a str>, self, call_m!(self.take4));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256834,"byte_end":256913,"line_start":76,"line_end":76,"column_start":1,"column_end":80}},{"value":"/ }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256914,"byte_end":256919,"line_start":77,"line_end":77,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256920,"byte_end":256927,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/ More complicated combinations still mostly look the same as their `named!`","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":256928,"byte_end":257006,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ counterparts:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257007,"byte_end":257024,"line_start":80,"line_end":80,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257025,"byte_end":257028,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257029,"byte_end":257042,"line_start":82,"line_end":82,"column_start":1,"column_end":14}},{"value":"/    method!(pub simple_chain<&mut Parser<'a>, &'a str, &'a str>, self,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257043,"byte_end":257116,"line_start":83,"line_end":83,"column_start":1,"column_end":74}},{"value":"/      do_parse!(","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257117,"byte_end":257136,"line_start":84,"line_end":84,"column_start":1,"column_end":20}},{"value":"/             call_m!(self.tag_abc)                                        >>","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257137,"byte_end":257216,"line_start":85,"line_end":85,"column_start":1,"column_end":80}},{"value":"/             call_m!(self.tag_def)                                        >>","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257217,"byte_end":257296,"line_start":86,"line_end":86,"column_start":1,"column_end":80}},{"value":"/             call_m!(self.tag_ghi)                                        >>","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257297,"byte_end":257376,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/       last: map!(call_m!(self.simple_peek), |parsed| sb.parsed = parsed) >>","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257377,"byte_end":257456,"line_start":88,"line_end":88,"column_start":1,"column_end":80}},{"value":"/       (last)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257457,"byte_end":257473,"line_start":89,"line_end":89,"column_start":1,"column_end":17}},{"value":"/      )","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257474,"byte_end":257484,"line_start":90,"line_end":90,"column_start":1,"column_end":11}},{"value":"/    );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257485,"byte_end":257494,"line_start":91,"line_end":91,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257495,"byte_end":257502,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ The three additions to method definitions to remember are:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257503,"byte_end":257565,"line_start":93,"line_end":93,"column_start":1,"column_end":63}},{"value":"/ 1. Specify `self`'s type","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257566,"byte_end":257594,"line_start":94,"line_end":94,"column_start":1,"column_end":29}},{"value":"/ 2. Pass `self` to the macro","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257595,"byte_end":257626,"line_start":95,"line_end":95,"column_start":1,"column_end":32}},{"value":"/ 4. Call parser methods using the `call_m!` macro.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/methods.rs","byte_start":257627,"byte_end":257680,"line_start":96,"line_end":96,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":633},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bits","qualname":"::bits","value":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639}],"decl_id":null,"docs":" Bit level parsers and combinators","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14819,"byte_end":14831,"line_start":451,"line_end":451,"column_start":1,"column_end":13}},{"value":"/ Bit level parsers and combinators","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","byte_start":332907,"byte_end":332944,"line_start":1,"line_end":1,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","byte_start":332945,"byte_end":332948,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Bit parsing is handled by tweaking the input in most macros.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","byte_start":332949,"byte_end":333013,"line_start":3,"line_end":3,"column_start":1,"column_end":65}},{"value":"/ In byte level parsing, the input is generally a `&[u8]` passed from combinator","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","byte_start":333014,"byte_end":333096,"line_start":4,"line_end":4,"column_start":1,"column_end":83}},{"value":"/ to combinator as the slices are manipulated.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","byte_start":333097,"byte_end":333145,"line_start":5,"line_end":5,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","byte_start":333146,"byte_end":333149,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Bit parsers take a `(&[u8], usize)` as input. The first part of the tuple is a byte slice,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","byte_start":333150,"byte_end":333244,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ the second part is a bit offset in the first byte of the slice.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","byte_start":333245,"byte_end":333312,"line_start":8,"line_end":8,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","byte_start":333313,"byte_end":333316,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ By passing a pair like this, we can leverage most of the existing combinators, and avoid","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","byte_start":333317,"byte_end":333409,"line_start":10,"line_end":10,"column_start":1,"column_end":93}},{"value":"/ transforming the whole slice to a vector of booleans. This should make it easy","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","byte_start":333410,"byte_end":333492,"line_start":11,"line_end":11,"column_start":1,"column_end":83}},{"value":"/ to see a byte slice as a bit stream, and parse code points of arbitrary bit length.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","byte_start":333493,"byte_end":333580,"line_start":12,"line_end":12,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/bits.rs","byte_start":333581,"byte_end":333584,"line_start":13,"line_end":13,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":2695},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/character.rs","byte_start":351762,"byte_end":351769,"line_start":126,"line_end":126,"column_start":56,"column_end":63},"name":"newline","qualname":"::character::newline","value":"pub fn newline(&[u8]) -> crate::IResult<&[u8], char, u32>","parent":null,"children":[],"decl_id":null,"docs":"Matches a newline character '\\n'\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2715},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/character.rs","byte_start":351843,"byte_end":351846,"line_start":128,"line_end":128,"column_start":52,"column_end":55},"name":"tab","qualname":"::character::tab","value":"pub fn tab(&[u8]) -> crate::IResult<&[u8], char, u32>","parent":null,"children":[],"decl_id":null,"docs":"Matches a tab character '\\t'\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/character.rs","byte_start":352182,"byte_end":352189,"line_start":141,"line_end":141,"column_start":8,"column_end":15},"name":"anychar","qualname":"::character::anychar","value":"pub fn anychar<T>(T) -> IResult<T, char> where T: InputIter + InputLength +\nSlice<RangeFrom<usize>> + AtEof, <T as InputIter>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" matches one byte as a character. Note that the input type will\n accept a `str`, but not a `&[u8]`, unlike many other nom parsers.","sig":null,"attributes":[{"value":"/ matches one byte as a character. Note that the input type will","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/character.rs","byte_start":351869,"byte_end":351935,"line_start":130,"line_end":130,"column_start":1,"column_end":67}},{"value":"/ accept a `str`, but not a `&[u8]`, unlike many other nom parsers.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/character.rs","byte_start":351936,"byte_end":352005,"line_start":131,"line_end":131,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/character.rs","byte_start":352006,"byte_end":352009,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/character.rs","byte_start":352010,"byte_end":352023,"line_start":133,"line_end":133,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/character.rs","byte_start":352024,"byte_end":352031,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/character.rs","byte_start":352032,"byte_end":352068,"line_start":135,"line_end":135,"column_start":1,"column_end":37}},{"value":"/ # use nom::anychar;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/character.rs","byte_start":352069,"byte_end":352092,"line_start":136,"line_end":136,"column_start":1,"column_end":24}},{"value":"/ # fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/character.rs","byte_start":352093,"byte_end":352110,"line_start":137,"line_end":137,"column_start":1,"column_end":18}},{"value":"/ assert_eq!(anychar(\"abc\"), Ok((\"bc\",'a')));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/character.rs","byte_start":352111,"byte_end":352158,"line_start":138,"line_end":138,"column_start":1,"column_end":48}},{"value":"/ # }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/character.rs","byte_start":352159,"byte_end":352166,"line_start":139,"line_end":139,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/character.rs","byte_start":352167,"byte_end":352174,"line_start":140,"line_end":140,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":739},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":354963,"byte_end":354969,"line_start":25,"line_end":25,"column_start":8,"column_end":14},"name":"tag_cl","qualname":"::nom::tag_cl","value":"pub fn tag_cl<'a, 'b>(&'a [u8])\n-> Box<Fn(&'b [u8]) -> IResult<&'b [u8], &'b [u8]> + 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":354920,"byte_end":354945,"line_start":23,"line_end":23,"column_start":1,"column_end":26}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":354946,"byte_end":354955,"line_start":24,"line_end":24,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":743},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":355384,"byte_end":355389,"line_start":38,"line_end":38,"column_start":8,"column_end":13},"name":"print","qualname":"::nom::print","value":"pub fn print<T: Debug>(T) -> IResult<T, ()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":355343,"byte_end":355366,"line_start":36,"line_end":36,"column_start":1,"column_end":24}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":355367,"byte_end":355376,"line_start":37,"line_end":37,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":745},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":355495,"byte_end":355500,"line_start":44,"line_end":44,"column_start":8,"column_end":13},"name":"begin","qualname":"::nom::begin","value":"pub fn begin(&[u8]) -> IResult<(), &[u8]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":355478,"byte_end":355487,"line_start":43,"line_end":43,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":746},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":355567,"byte_end":355571,"line_start":48,"line_end":48,"column_start":8,"column_end":12},"name":"crlf","qualname":"::nom::crlf","value":"pub fn crlf<T>(T) -> IResult<T, T> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: InputIter + AtEof,\nT: Compare<&'static str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":748},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":356205,"byte_end":356220,"line_start":67,"line_end":67,"column_start":8,"column_end":23},"name":"not_line_ending","qualname":"::nom::not_line_ending","value":"pub fn not_line_ending<T>(T) -> IResult<T, T> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: InputIter + InputLength +\nAtEof, T: Compare<&'static str>, <T as InputIter>::Item: AsChar,\n<T as InputIter>::RawItem: AsChar","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":751},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":357527,"byte_end":357538,"line_start":109,"line_end":109,"column_start":8,"column_end":19},"name":"line_ending","qualname":"::nom::line_ending","value":"pub fn line_ending<T>(T) -> IResult<T, T> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: InputIter + InputLength +\nAtEof, T: Compare<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an end of line (both '\\n' and '\\r\\n')\n","sig":null,"attributes":[{"value":"/ Recognizes an end of line (both '\\n' and '\\r\\n')","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":357467,"byte_end":357519,"line_start":108,"line_end":108,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":753},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":358318,"byte_end":358321,"line_start":129,"line_end":129,"column_start":8,"column_end":11},"name":"eol","qualname":"::nom::eol","value":"pub fn eol<T>(T) -> IResult<T, T> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: InputIter + InputLength +\nAtEof, T: Compare<&'static str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":755},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":358591,"byte_end":358604,"line_start":140,"line_end":140,"column_start":8,"column_end":21},"name":"is_alphabetic","qualname":"::nom::is_alphabetic","value":"pub fn is_alphabetic(u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII alphabetic: A-Z, a-z\n","sig":null,"attributes":[{"value":"/ Tests if byte is ASCII alphabetic: A-Z, a-z","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":358526,"byte_end":358573,"line_start":138,"line_end":138,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":358574,"byte_end":358583,"line_start":139,"line_end":139,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":756},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":358745,"byte_end":358753,"line_start":146,"line_end":146,"column_start":8,"column_end":16},"name":"is_digit","qualname":"::nom::is_digit","value":"pub fn is_digit(u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII digit: 0-9\n","sig":null,"attributes":[{"value":"/ Tests if byte is ASCII digit: 0-9","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":358690,"byte_end":358727,"line_start":144,"line_end":144,"column_start":1,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":358728,"byte_end":358737,"line_start":145,"line_end":145,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":757},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":358874,"byte_end":358886,"line_start":152,"line_end":152,"column_start":8,"column_end":20},"name":"is_hex_digit","qualname":"::nom::is_hex_digit","value":"pub fn is_hex_digit(u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII hex digit: 0-9, A-F, a-f\n","sig":null,"attributes":[{"value":"/ Tests if byte is ASCII hex digit: 0-9, A-F, a-f","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":358805,"byte_end":358856,"line_start":150,"line_end":150,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":358857,"byte_end":358866,"line_start":151,"line_end":151,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":758},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":359065,"byte_end":359077,"line_start":158,"line_end":158,"column_start":8,"column_end":20},"name":"is_oct_digit","qualname":"::nom::is_oct_digit","value":"pub fn is_oct_digit(u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII octal digit: 0-7\n","sig":null,"attributes":[{"value":"/ Tests if byte is ASCII octal digit: 0-7","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":359004,"byte_end":359047,"line_start":156,"line_end":156,"column_start":1,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":359048,"byte_end":359057,"line_start":157,"line_end":157,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":759},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":359201,"byte_end":359216,"line_start":164,"line_end":164,"column_start":8,"column_end":23},"name":"is_alphanumeric","qualname":"::nom::is_alphanumeric","value":"pub fn is_alphanumeric(u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9\n","sig":null,"attributes":[{"value":"/ Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":359129,"byte_end":359183,"line_start":162,"line_end":162,"column_start":1,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":359184,"byte_end":359193,"line_start":163,"line_end":163,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":760},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":359334,"byte_end":359342,"line_start":170,"line_end":170,"column_start":8,"column_end":16},"name":"is_space","qualname":"::nom::is_space","value":"pub fn is_space(u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII space or tab\n","sig":null,"attributes":[{"value":"/ Tests if byte is ASCII space or tab","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":359277,"byte_end":359316,"line_start":168,"line_end":168,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":359317,"byte_end":359326,"line_start":169,"line_end":169,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":761},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":359846,"byte_end":359851,"line_start":184,"line_end":184,"column_start":8,"column_end":13},"name":"alpha","qualname":"::nom::alpha","value":"pub fn alpha<T>(T) -> IResult<T, T, u32> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more lowercase and uppercase alphabetic characters.\n For ASCII strings: a-zA-Z\n For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)\n","sig":null,"attributes":[{"value":"/ Recognizes one or more lowercase and uppercase alphabetic characters.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":359657,"byte_end":359730,"line_start":181,"line_end":181,"column_start":1,"column_end":74}},{"value":"/ For ASCII strings: a-zA-Z","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":359731,"byte_end":359760,"line_start":182,"line_end":182,"column_start":1,"column_end":30}},{"value":"/ For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":359761,"byte_end":359838,"line_start":183,"line_end":183,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":763},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":360174,"byte_end":360180,"line_start":195,"line_end":195,"column_start":8,"column_end":14},"name":"alpha0","qualname":"::nom::alpha0","value":"pub fn alpha0<T>(T) -> IResult<T, T, u32> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more lowercase and uppercase alphabetic characters.\n For ASCII strings: a-zA-Z\n For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)\n","sig":null,"attributes":[{"value":"/ Recognizes zero or more lowercase and uppercase alphabetic characters.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":359984,"byte_end":360058,"line_start":192,"line_end":192,"column_start":1,"column_end":75}},{"value":"/ For ASCII strings: a-zA-Z","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":360059,"byte_end":360088,"line_start":193,"line_end":193,"column_start":1,"column_end":30}},{"value":"/ For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":360089,"byte_end":360166,"line_start":194,"line_end":194,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":766},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":360536,"byte_end":360542,"line_start":206,"line_end":206,"column_start":8,"column_end":14},"name":"alpha1","qualname":"::nom::alpha1","value":"pub fn alpha1<T>(T) -> IResult<T, T, u32> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more lowercase and uppercase alphabetic characters\n For ASCII strings: a-zA-Z\n For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)\n","sig":null,"attributes":[{"value":"/ Recognizes one or more lowercase and uppercase alphabetic characters","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":360348,"byte_end":360420,"line_start":203,"line_end":203,"column_start":1,"column_end":73}},{"value":"/ For ASCII strings: a-zA-Z","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":360421,"byte_end":360450,"line_start":204,"line_end":204,"column_start":1,"column_end":30}},{"value":"/ For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":360451,"byte_end":360528,"line_start":205,"line_end":205,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":769},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":360789,"byte_end":360794,"line_start":215,"line_end":215,"column_start":8,"column_end":13},"name":"digit","qualname":"::nom::digit","value":"pub fn digit<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more numerical characters: 0-9\n","sig":null,"attributes":[{"value":"/ Recognizes one or more numerical characters: 0-9","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":360729,"byte_end":360781,"line_start":214,"line_end":214,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":771},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":360983,"byte_end":360989,"line_start":224,"line_end":224,"column_start":8,"column_end":14},"name":"digit0","qualname":"::nom::digit0","value":"pub fn digit0<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more numerical characters: 0-9\n","sig":null,"attributes":[{"value":"/ Recognizes zero or more numerical characters: 0-9","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":360922,"byte_end":360975,"line_start":223,"line_end":223,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":774},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":361216,"byte_end":361222,"line_start":233,"line_end":233,"column_start":8,"column_end":14},"name":"digit1","qualname":"::nom::digit1","value":"pub fn digit1<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more numerical characters: 0-9\n","sig":null,"attributes":[{"value":"/ Recognizes one or more numerical characters: 0-9","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":361156,"byte_end":361208,"line_start":232,"line_end":232,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":777},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":361490,"byte_end":361499,"line_start":242,"line_end":242,"column_start":8,"column_end":17},"name":"hex_digit","qualname":"::nom::hex_digit","value":"pub fn hex_digit<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f\n","sig":null,"attributes":[{"value":"/ Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":361408,"byte_end":361482,"line_start":241,"line_end":241,"column_start":1,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":779},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":361714,"byte_end":361724,"line_start":251,"line_end":251,"column_start":8,"column_end":18},"name":"hex_digit0","qualname":"::nom::hex_digit0","value":"pub fn hex_digit0<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more hexadecimal numerical characters: 0-9, A-F, a-f\n","sig":null,"attributes":[{"value":"/ Recognizes zero or more hexadecimal numerical characters: 0-9, A-F, a-f","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":361631,"byte_end":361706,"line_start":250,"line_end":250,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":361972,"byte_end":361982,"line_start":259,"line_end":259,"column_start":8,"column_end":18},"name":"hex_digit1","qualname":"::nom::hex_digit1","value":"pub fn hex_digit1<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f\n","sig":null,"attributes":[{"value":"/ Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":361890,"byte_end":361964,"line_start":258,"line_end":258,"column_start":1,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":785},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":362227,"byte_end":362236,"line_start":268,"line_end":268,"column_start":8,"column_end":17},"name":"oct_digit","qualname":"::nom::oct_digit","value":"pub fn oct_digit<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more octal characters: 0-7\n","sig":null,"attributes":[{"value":"/ Recognizes one or more octal characters: 0-7","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":362171,"byte_end":362219,"line_start":267,"line_end":267,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":787},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":362425,"byte_end":362435,"line_start":277,"line_end":277,"column_start":8,"column_end":18},"name":"oct_digit0","qualname":"::nom::oct_digit0","value":"pub fn oct_digit0<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more octal characters: 0-7\n","sig":null,"attributes":[{"value":"/ Recognizes zero or more octal characters: 0-7","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":362368,"byte_end":362417,"line_start":276,"line_end":276,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":790},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":362658,"byte_end":362668,"line_start":286,"line_end":286,"column_start":8,"column_end":18},"name":"oct_digit1","qualname":"::nom::oct_digit1","value":"pub fn oct_digit1<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more octal characters: 0-7\n","sig":null,"attributes":[{"value":"/ Recognizes one or more octal characters: 0-7","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":362602,"byte_end":362650,"line_start":285,"line_end":285,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":793},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":363046,"byte_end":363058,"line_start":297,"line_end":297,"column_start":8,"column_end":20},"name":"alphanumeric","qualname":"::nom::alphanumeric","value":"pub fn alphanumeric<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more numerical and alphabetic characters\n For ASCII strings: 0-9a-zA-Z\n For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)\n","sig":null,"attributes":[{"value":"/ Recognizes one or more numerical and alphabetic characters","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":362857,"byte_end":362919,"line_start":294,"line_end":294,"column_start":1,"column_end":63}},{"value":"/ For ASCII strings: 0-9a-zA-Z","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":362920,"byte_end":362952,"line_start":295,"line_end":295,"column_start":1,"column_end":33}},{"value":"/ For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":362953,"byte_end":363038,"line_start":296,"line_end":296,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":795},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":363384,"byte_end":363397,"line_start":308,"line_end":308,"column_start":8,"column_end":21},"name":"alphanumeric0","qualname":"::nom::alphanumeric0","value":"pub fn alphanumeric0<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more numerical and alphabetic characters.\n For ASCII strings: 0-9a-zA-Z\n For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)\n","sig":null,"attributes":[{"value":"/ Recognizes zero or more numerical and alphabetic characters.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":363193,"byte_end":363257,"line_start":305,"line_end":305,"column_start":1,"column_end":65}},{"value":"/ For ASCII strings: 0-9a-zA-Z","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":363258,"byte_end":363290,"line_start":306,"line_end":306,"column_start":1,"column_end":33}},{"value":"/ For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":363291,"byte_end":363376,"line_start":307,"line_end":307,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":798},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":363752,"byte_end":363765,"line_start":318,"line_end":318,"column_start":8,"column_end":21},"name":"alphanumeric1","qualname":"::nom::alphanumeric1","value":"pub fn alphanumeric1<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more numerical and alphabetic characters.\n For ASCII strings: 0-9a-zA-Z\n For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)\n","sig":null,"attributes":[{"value":"/ Recognizes one or more numerical and alphabetic characters.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":363562,"byte_end":363625,"line_start":315,"line_end":315,"column_start":1,"column_end":64}},{"value":"/ For ASCII strings: 0-9a-zA-Z","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":363626,"byte_end":363658,"line_start":316,"line_end":316,"column_start":1,"column_end":33}},{"value":"/ For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":363659,"byte_end":363744,"line_start":317,"line_end":317,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":801},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":364007,"byte_end":364012,"line_start":327,"line_end":327,"column_start":8,"column_end":13},"name":"space","qualname":"::nom::space","value":"pub fn space<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar + Clone","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces and tabs\n","sig":null,"attributes":[{"value":"/ Recognizes one or more spaces and tabs","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":363957,"byte_end":363999,"line_start":326,"line_end":326,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":364199,"byte_end":364205,"line_start":336,"line_end":336,"column_start":8,"column_end":14},"name":"space0","qualname":"::nom::space0","value":"pub fn space0<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar + Clone","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more spaces and tabs\n","sig":null,"attributes":[{"value":"/ Recognizes zero or more spaces and tabs","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":364148,"byte_end":364191,"line_start":335,"line_end":335,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":806},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":364479,"byte_end":364485,"line_start":347,"line_end":347,"column_start":8,"column_end":14},"name":"space1","qualname":"::nom::space1","value":"pub fn space1<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar + Clone","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces and tabs\n","sig":null,"attributes":[{"value":"/ Recognizes one or more spaces and tabs","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":364429,"byte_end":364471,"line_start":346,"line_end":346,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":809},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":364828,"byte_end":364838,"line_start":362,"line_end":362,"column_start":8,"column_end":18},"name":"multispace","qualname":"::nom::multispace","value":"pub fn multispace<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar + Clone","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces, tabs, carriage returns and line feeds\n","sig":null,"attributes":[{"value":"/ Recognizes one or more spaces, tabs, carriage returns and line feeds","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":364748,"byte_end":364820,"line_start":361,"line_end":361,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":811},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":365060,"byte_end":365071,"line_start":371,"line_end":371,"column_start":8,"column_end":19},"name":"multispace0","qualname":"::nom::multispace0","value":"pub fn multispace0<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar + Clone","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more spaces, tabs, carriage returns and line feeds\n","sig":null,"attributes":[{"value":"/ Recognizes zero or more spaces, tabs, carriage returns and line feeds","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":364979,"byte_end":365052,"line_start":370,"line_end":370,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":814},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":365401,"byte_end":365412,"line_start":382,"line_end":382,"column_start":8,"column_end":19},"name":"multispace1","qualname":"::nom::multispace1","value":"pub fn multispace1<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar + Clone","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces, tabs, carriage returns and line feeds\n","sig":null,"attributes":[{"value":"/ Recognizes one or more spaces, tabs, carriage returns and line feeds","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":365321,"byte_end":365393,"line_start":381,"line_end":381,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":817},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":365713,"byte_end":365725,"line_start":396,"line_end":396,"column_start":8,"column_end":20},"name":"sized_buffer","qualname":"::nom::sized_buffer","value":"pub fn sized_buffer(&[u8]) -> IResult<&[u8], &[u8]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":818},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":366097,"byte_end":366102,"line_start":412,"line_end":412,"column_start":8,"column_end":13},"name":"be_u8","qualname":"::nom::be_u8","value":"pub fn be_u8(&[u8]) -> IResult<&[u8], u8>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an unsigned 1 byte integer (equivalent to take!(1)\n","sig":null,"attributes":[{"value":"/ Recognizes an unsigned 1 byte integer (equivalent to take!(1)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":366014,"byte_end":366079,"line_start":410,"line_end":410,"column_start":1,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":366080,"byte_end":366089,"line_start":411,"line_end":411,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":819},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":366300,"byte_end":366306,"line_start":422,"line_end":422,"column_start":8,"column_end":14},"name":"be_u16","qualname":"::nom::be_u16","value":"pub fn be_u16(&[u8]) -> IResult<&[u8], u16>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian unsigned 2 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian unsigned 2 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":366232,"byte_end":366282,"line_start":420,"line_end":420,"column_start":1,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":366283,"byte_end":366292,"line_start":421,"line_end":421,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":820},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":366553,"byte_end":366559,"line_start":433,"line_end":433,"column_start":8,"column_end":14},"name":"be_u24","qualname":"::nom::be_u24","value":"pub fn be_u24(&[u8]) -> IResult<&[u8], u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian unsigned 3 byte integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian unsigned 3 byte integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":366486,"byte_end":366535,"line_start":431,"line_end":431,"column_start":1,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":366536,"byte_end":366545,"line_start":432,"line_end":432,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":821},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":366833,"byte_end":366839,"line_start":444,"line_end":444,"column_start":8,"column_end":14},"name":"be_u32","qualname":"::nom::be_u32","value":"pub fn be_u32(&[u8]) -> IResult<&[u8], u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian unsigned 4 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian unsigned 4 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":366765,"byte_end":366815,"line_start":442,"line_end":442,"column_start":1,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":366816,"byte_end":366825,"line_start":443,"line_end":443,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":822},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":367135,"byte_end":367141,"line_start":455,"line_end":455,"column_start":8,"column_end":14},"name":"be_u64","qualname":"::nom::be_u64","value":"pub fn be_u64(&[u8]) -> IResult<&[u8], u64, u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian unsigned 8 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian unsigned 8 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":367067,"byte_end":367117,"line_start":453,"line_end":453,"column_start":1,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":367118,"byte_end":367127,"line_start":454,"line_end":454,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":823},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":367545,"byte_end":367552,"line_start":467,"line_end":467,"column_start":8,"column_end":15},"name":"be_u128","qualname":"::nom::be_u128","value":"pub fn be_u128(&[u8]) -> IResult<&[u8], u128, u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian unsigned 16 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian unsigned 16 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":367476,"byte_end":367527,"line_start":465,"line_end":465,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":367528,"byte_end":367537,"line_start":466,"line_end":466,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":824},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368272,"byte_end":368277,"line_start":493,"line_end":493,"column_start":8,"column_end":13},"name":"be_i8","qualname":"::nom::be_i8","value":"pub fn be_i8(&[u8]) -> IResult<&[u8], i8>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a signed 1 byte integer (equivalent to take!(1)\n","sig":null,"attributes":[{"value":"/ Recognizes a signed 1 byte integer (equivalent to take!(1)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368192,"byte_end":368254,"line_start":491,"line_end":491,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368255,"byte_end":368264,"line_start":492,"line_end":492,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":825},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368411,"byte_end":368417,"line_start":499,"line_end":499,"column_start":8,"column_end":14},"name":"be_i16","qualname":"::nom::be_i16","value":"pub fn be_i16(&[u8]) -> IResult<&[u8], i16>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian signed 2 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian signed 2 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368345,"byte_end":368393,"line_start":497,"line_end":497,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368394,"byte_end":368403,"line_start":498,"line_end":498,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":826},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368554,"byte_end":368560,"line_start":505,"line_end":505,"column_start":8,"column_end":14},"name":"be_i24","qualname":"::nom::be_i24","value":"pub fn be_i24(&[u8]) -> IResult<&[u8], i32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian signed 3 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian signed 3 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368488,"byte_end":368536,"line_start":503,"line_end":503,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368537,"byte_end":368546,"line_start":504,"line_end":504,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":827},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368847,"byte_end":368853,"line_start":516,"line_end":516,"column_start":8,"column_end":14},"name":"be_i32","qualname":"::nom::be_i32","value":"pub fn be_i32(&[u8]) -> IResult<&[u8], i32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian signed 4 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian signed 4 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368781,"byte_end":368829,"line_start":514,"line_end":514,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368830,"byte_end":368839,"line_start":515,"line_end":515,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":828},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368990,"byte_end":368996,"line_start":522,"line_end":522,"column_start":8,"column_end":14},"name":"be_i64","qualname":"::nom::be_i64","value":"pub fn be_i64(&[u8]) -> IResult<&[u8], i64>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian signed 8 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian signed 8 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368924,"byte_end":368972,"line_start":520,"line_end":520,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":368973,"byte_end":368982,"line_start":521,"line_end":521,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":829},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":369134,"byte_end":369141,"line_start":528,"line_end":528,"column_start":8,"column_end":15},"name":"be_i128","qualname":"::nom::be_i128","value":"pub fn be_i128(&[u8]) -> IResult<&[u8], i128>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian signed 16 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian signed 16 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":369067,"byte_end":369116,"line_start":526,"line_end":526,"column_start":1,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":369117,"byte_end":369126,"line_start":527,"line_end":527,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":830},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":369298,"byte_end":369303,"line_start":534,"line_end":534,"column_start":8,"column_end":13},"name":"le_u8","qualname":"::nom::le_u8","value":"pub fn le_u8(&[u8]) -> IResult<&[u8], u8>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an unsigned 1 byte integer (equivalent to take!(1)\n","sig":null,"attributes":[{"value":"/ Recognizes an unsigned 1 byte integer (equivalent to take!(1)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":369215,"byte_end":369280,"line_start":532,"line_end":532,"column_start":1,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":369281,"byte_end":369290,"line_start":533,"line_end":533,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":831},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":369504,"byte_end":369510,"line_start":544,"line_end":544,"column_start":8,"column_end":14},"name":"le_u16","qualname":"::nom::le_u16","value":"pub fn le_u16(&[u8]) -> IResult<&[u8], u16>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian unsigned 2 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian unsigned 2 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":369433,"byte_end":369486,"line_start":542,"line_end":542,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":369487,"byte_end":369496,"line_start":543,"line_end":543,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":832},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":369760,"byte_end":369766,"line_start":555,"line_end":555,"column_start":8,"column_end":14},"name":"le_u24","qualname":"::nom::le_u24","value":"pub fn le_u24(&[u8]) -> IResult<&[u8], u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian unsigned 3 byte integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian unsigned 3 byte integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":369690,"byte_end":369742,"line_start":553,"line_end":553,"column_start":1,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":369743,"byte_end":369752,"line_start":554,"line_end":554,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":833},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":370043,"byte_end":370049,"line_start":566,"line_end":566,"column_start":8,"column_end":14},"name":"le_u32","qualname":"::nom::le_u32","value":"pub fn le_u32(&[u8]) -> IResult<&[u8], u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian unsigned 4 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian unsigned 4 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":369972,"byte_end":370025,"line_start":564,"line_end":564,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":370026,"byte_end":370035,"line_start":565,"line_end":565,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":834},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":370348,"byte_end":370354,"line_start":577,"line_end":577,"column_start":8,"column_end":14},"name":"le_u64","qualname":"::nom::le_u64","value":"pub fn le_u64(&[u8]) -> IResult<&[u8], u64>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian unsigned 8 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian unsigned 8 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":370277,"byte_end":370330,"line_start":575,"line_end":575,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":370331,"byte_end":370340,"line_start":576,"line_end":576,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":835},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":370756,"byte_end":370763,"line_start":589,"line_end":589,"column_start":8,"column_end":15},"name":"le_u128","qualname":"::nom::le_u128","value":"pub fn le_u128(&[u8]) -> IResult<&[u8], u128, u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian unsigned 16 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian unsigned 16 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":370684,"byte_end":370738,"line_start":587,"line_end":587,"column_start":1,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":370739,"byte_end":370748,"line_start":588,"line_end":588,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":836},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":371483,"byte_end":371488,"line_start":615,"line_end":615,"column_start":8,"column_end":13},"name":"le_i8","qualname":"::nom::le_i8","value":"pub fn le_i8(&[u8]) -> IResult<&[u8], i8>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a signed 1 byte integer (equivalent to take!(1)\n","sig":null,"attributes":[{"value":"/ Recognizes a signed 1 byte integer (equivalent to take!(1)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":371403,"byte_end":371465,"line_start":613,"line_end":613,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":371466,"byte_end":371475,"line_start":614,"line_end":614,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":837},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":371625,"byte_end":371631,"line_start":621,"line_end":621,"column_start":8,"column_end":14},"name":"le_i16","qualname":"::nom::le_i16","value":"pub fn le_i16(&[u8]) -> IResult<&[u8], i16>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian signed 2 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian signed 2 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":371556,"byte_end":371607,"line_start":619,"line_end":619,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":371608,"byte_end":371617,"line_start":620,"line_end":620,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":838},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":371771,"byte_end":371777,"line_start":627,"line_end":627,"column_start":8,"column_end":14},"name":"le_i24","qualname":"::nom::le_i24","value":"pub fn le_i24(&[u8]) -> IResult<&[u8], i32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian signed 3 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian signed 3 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":371702,"byte_end":371753,"line_start":625,"line_end":625,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":371754,"byte_end":371763,"line_start":626,"line_end":626,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":839},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":372067,"byte_end":372073,"line_start":638,"line_end":638,"column_start":8,"column_end":14},"name":"le_i32","qualname":"::nom::le_i32","value":"pub fn le_i32(&[u8]) -> IResult<&[u8], i32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian signed 4 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian signed 4 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":371998,"byte_end":372049,"line_start":636,"line_end":636,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":372050,"byte_end":372059,"line_start":637,"line_end":637,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":840},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":372213,"byte_end":372219,"line_start":644,"line_end":644,"column_start":8,"column_end":14},"name":"le_i64","qualname":"::nom::le_i64","value":"pub fn le_i64(&[u8]) -> IResult<&[u8], i64>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian signed 8 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian signed 8 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":372144,"byte_end":372195,"line_start":642,"line_end":642,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":372196,"byte_end":372205,"line_start":643,"line_end":643,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":841},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":372360,"byte_end":372367,"line_start":650,"line_end":650,"column_start":8,"column_end":15},"name":"le_i128","qualname":"::nom::le_i128","value":"pub fn le_i128(&[u8]) -> IResult<&[u8], i128>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian signed 16 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian signed 16 bytes integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":372290,"byte_end":372342,"line_start":648,"line_end":648,"column_start":1,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":372343,"byte_end":372352,"line_start":649,"line_end":649,"column_start":1,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2808},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":372538,"byte_end":372541,"line_start":657,"line_end":657,"column_start":3,"column_end":6},"name":"Big","qualname":"::nom::Endianness::Big","value":"Endianness::Big","parent":{"krate":0,"index":2807},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2810},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":372545,"byte_end":372551,"line_start":658,"line_end":658,"column_start":3,"column_end":9},"name":"Little","qualname":"::nom::Endianness::Little","value":"Endianness::Little","parent":{"krate":0,"index":2807},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2807},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":372523,"byte_end":372533,"line_start":656,"line_end":656,"column_start":10,"column_end":20},"name":"Endianness","qualname":"::nom::Endianness","value":"pub enum Endianness { Big, Little, }","parent":null,"children":[{"krate":0,"index":2808},{"krate":0,"index":2810}],"decl_id":null,"docs":" Configurable endianness\n","sig":null,"attributes":[{"value":"/ Configurable endianness","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":372441,"byte_end":372468,"line_start":654,"line_end":654,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":850},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":374807,"byte_end":374813,"line_start":697,"line_end":697,"column_start":8,"column_end":14},"name":"be_f32","qualname":"::nom::be_f32","value":"pub fn be_f32(&[u8]) -> IResult<&[u8], f32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian 4 bytes floating point number\n","sig":null,"attributes":[{"value":"/ Recognizes big endian 4 bytes floating point number","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":374734,"byte_end":374789,"line_start":695,"line_end":695,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":374790,"byte_end":374799,"line_start":696,"line_end":696,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":851},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":375043,"byte_end":375049,"line_start":706,"line_end":706,"column_start":8,"column_end":14},"name":"be_f64","qualname":"::nom::be_f64","value":"pub fn be_f64(&[u8]) -> IResult<&[u8], f64>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian 8 bytes floating point number\n","sig":null,"attributes":[{"value":"/ Recognizes big endian 8 bytes floating point number","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":374970,"byte_end":375025,"line_start":704,"line_end":704,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":375026,"byte_end":375035,"line_start":705,"line_end":705,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":852},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":375282,"byte_end":375288,"line_start":715,"line_end":715,"column_start":8,"column_end":14},"name":"le_f32","qualname":"::nom::le_f32","value":"pub fn le_f32(&[u8]) -> IResult<&[u8], f32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian 4 bytes floating point number\n","sig":null,"attributes":[{"value":"/ Recognizes little endian 4 bytes floating point number","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":375206,"byte_end":375264,"line_start":713,"line_end":713,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":375265,"byte_end":375274,"line_start":714,"line_end":714,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":853},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":375521,"byte_end":375527,"line_start":724,"line_end":724,"column_start":8,"column_end":14},"name":"le_f64","qualname":"::nom::le_f64","value":"pub fn le_f64(&[u8]) -> IResult<&[u8], f64>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian 8 bytes floating point number\n","sig":null,"attributes":[{"value":"/ Recognizes little endian 8 bytes floating point number","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":375445,"byte_end":375503,"line_start":722,"line_end":722,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":375504,"byte_end":375513,"line_start":723,"line_end":723,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":854},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":375738,"byte_end":375745,"line_start":733,"line_end":733,"column_start":8,"column_end":15},"name":"hex_u32","qualname":"::nom::hex_u32","value":"pub fn hex_u32(&[u8]) -> IResult<&[u8], u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a hex-encoded integer\n","sig":null,"attributes":[{"value":"/ Recognizes a hex-encoded integer","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":375684,"byte_end":375720,"line_start":731,"line_end":731,"column_start":1,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":375721,"byte_end":375730,"line_start":732,"line_end":732,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":856},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":376366,"byte_end":376375,"line_start":761,"line_end":761,"column_start":8,"column_end":17},"name":"non_empty","qualname":"::nom::non_empty","value":"pub fn non_empty<T>(T) -> IResult<T, T> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: InputLength + AtEof","parent":null,"children":[],"decl_id":null,"docs":" Recognizes non empty buffers\n","sig":null,"attributes":[{"value":"/ Recognizes non empty buffers","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":376316,"byte_end":376348,"line_start":759,"line_end":759,"column_start":1,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":376349,"byte_end":376358,"line_start":760,"line_end":760,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":858},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":376741,"byte_end":376745,"line_start":775,"line_end":775,"column_start":8,"column_end":12},"name":"rest","qualname":"::nom::rest","value":"pub fn rest<T>(T) -> IResult<T, T> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: InputLength","parent":null,"children":[],"decl_id":null,"docs":" Return the remaining input.\n","sig":null,"attributes":[{"value":"/ Return the remaining input.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":376692,"byte_end":376723,"line_start":773,"line_end":773,"column_start":1,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":376724,"byte_end":376733,"line_start":774,"line_end":774,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":860},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":376992,"byte_end":377000,"line_start":785,"line_end":785,"column_start":8,"column_end":16},"name":"rest_len","qualname":"::nom::rest_len","value":"pub fn rest_len<T>(T) -> IResult<T, usize> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: InputLength","parent":null,"children":[],"decl_id":null,"docs":" Return the length of the remaining input.\n","sig":null,"attributes":[{"value":"/ Return the length of the remaining input.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":376929,"byte_end":376974,"line_start":783,"line_end":783,"column_start":1,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":376975,"byte_end":376984,"line_start":784,"line_end":784,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":862},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":377252,"byte_end":377258,"line_start":796,"line_end":796,"column_start":8,"column_end":14},"name":"rest_s","qualname":"::nom::rest_s","value":"pub fn rest_s(&str) -> IResult<&str, &str>","parent":null,"children":[],"decl_id":null,"docs":" Return the remaining input, for strings.\n","sig":null,"attributes":[{"value":"/ Return the remaining input, for strings.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":377190,"byte_end":377234,"line_start":794,"line_end":794,"column_start":1,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":377235,"byte_end":377244,"line_start":795,"line_end":795,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":863},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":377404,"byte_end":377419,"line_start":802,"line_end":802,"column_start":8,"column_end":23},"name":"recognize_float","qualname":"::nom::recognize_float","value":"pub fn recognize_float<T>(T) -> IResult<T, T, u32> where\nT: Slice<Range<usize>> + Slice<RangeFrom<usize>> + Slice<RangeTo<usize>>,\nT: Clone + Offset, T: InputIter + AtEof, <T as InputIter>::Item: AsChar,\nT: InputTakeAtPosition, <T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_imports)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":377337,"byte_end":377361,"line_start":800,"line_end":800,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":865},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":378208,"byte_end":378213,"line_start":831,"line_end":831,"column_start":8,"column_end":13},"name":"float","qualname":"::nom::float","value":"pub fn float<T>(T) -> IResult<T, f32, u32> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: Clone + Offset,\nT: InputIter + InputLength + ParseTo<f32> + AtEof,\n<T as InputIter>::Item: AsChar, T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a byte string and returns a f32\n","sig":null,"attributes":[{"value":"/ Recognizes floating point number in a byte string and returns a f32","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":378049,"byte_end":378120,"line_start":828,"line_end":828,"column_start":1,"column_end":72}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":378121,"byte_end":378146,"line_start":829,"line_end":829,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":867},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":378735,"byte_end":378742,"line_start":846,"line_end":846,"column_start":8,"column_end":15},"name":"float_s","qualname":"::nom::float_s","value":"pub fn float_s<T>(T) -> IResult<T, f32, u32> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: Clone + Offset,\nT: InputIter + InputLength + ParseTo<f32> + AtEof,\n<T as InputIter>::Item: AsChar, T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a string and returns a f32\n","sig":null,"attributes":[{"value":"/ Recognizes floating point number in a string and returns a f32","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":378567,"byte_end":378633,"line_start":843,"line_end":843,"column_start":1,"column_end":67}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":378634,"byte_end":378659,"line_start":844,"line_end":844,"column_start":1,"column_end":26}},{"value":"deprecated(since = \"4.1.0\", note = \"Please use `float` instead\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":378660,"byte_end":378727,"line_start":845,"line_end":845,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":869},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":379208,"byte_end":379214,"line_start":860,"line_end":860,"column_start":8,"column_end":14},"name":"double","qualname":"::nom::double","value":"pub fn double<T>(T) -> IResult<T, f64, u32> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: Clone + Offset,\nT: InputIter + InputLength + ParseTo<f64> + AtEof,\n<T as InputIter>::Item: AsChar, T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a byte string and returns a f64\n","sig":null,"attributes":[{"value":"/ Recognizes floating point number in a byte string and returns a f64","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":379103,"byte_end":379174,"line_start":858,"line_end":858,"column_start":1,"column_end":72}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":379175,"byte_end":379200,"line_start":859,"line_end":859,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":871},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":379744,"byte_end":379752,"line_start":875,"line_end":875,"column_start":8,"column_end":16},"name":"double_s","qualname":"::nom::double_s","value":"pub fn double_s<T>(T) -> IResult<T, f64, u32> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: Clone + Offset,\nT: InputIter + InputLength + ParseTo<f64> + AtEof,\n<T as InputIter>::Item: AsChar, T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a string and returns a f64\n","sig":null,"attributes":[{"value":"/ Recognizes floating point number in a string and returns a f64","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":379575,"byte_end":379641,"line_start":872,"line_end":872,"column_start":1,"column_end":67}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":379642,"byte_end":379667,"line_start":873,"line_end":873,"column_start":1,"column_end":26}},{"value":"deprecated(since = \"4.1.0\", note = \"Please use `double` instead\")","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/nom.rs","byte_start":379668,"byte_end":379736,"line_start":874,"line_end":874,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":873},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"whitespace","qualname":"::whitespace","value":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":903},{"krate":0,"index":907}],"decl_id":null,"docs":" Support for whitespace delimited formats","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14898,"byte_end":14910,"line_start":459,"line_end":459,"column_start":1,"column_end":13}},{"value":"/ Support for whitespace delimited formats","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406430,"byte_end":406474,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406475,"byte_end":406478,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ a lot of textual formats allows spaces and other","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406479,"byte_end":406531,"line_start":3,"line_end":3,"column_start":1,"column_end":53}},{"value":"/ types of separators between tokens. Handling it","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406532,"byte_end":406583,"line_start":4,"line_end":4,"column_start":1,"column_end":52}},{"value":"/ manually with nom means wrapping all parsers","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406584,"byte_end":406632,"line_start":5,"line_end":5,"column_start":1,"column_end":49}},{"value":"/ like this:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406633,"byte_end":406647,"line_start":6,"line_end":6,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406648,"byte_end":406651,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406652,"byte_end":406665,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"/ named!(token, delimited!(space, tk, space));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406666,"byte_end":406714,"line_start":9,"line_end":9,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406715,"byte_end":406722,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406723,"byte_end":406726,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ To ease the development of such parsers, you","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406727,"byte_end":406775,"line_start":12,"line_end":12,"column_start":1,"column_end":49}},{"value":"/ can use the whitespace parsing facility, which works","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406776,"byte_end":406832,"line_start":13,"line_end":13,"column_start":1,"column_end":57}},{"value":"/ as follows:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406833,"byte_end":406848,"line_start":14,"line_end":14,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406849,"byte_end":406852,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406853,"byte_end":406860,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406861,"byte_end":406897,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/ # fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406898,"byte_end":406915,"line_start":18,"line_end":18,"column_start":1,"column_end":18}},{"value":"/ named!(tuple<&[u8], (&[u8], &[u8]) >,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406916,"byte_end":406957,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/   ws!(tuple!( take!(3), tag!(\"de\") ))","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":406958,"byte_end":406999,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407000,"byte_end":407006,"line_start":21,"line_end":21,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407007,"byte_end":407010,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407011,"byte_end":407026,"line_start":23,"line_end":23,"column_start":1,"column_end":16}},{"value":"/   tuple(&b\" \\t abc de fg\"[..]),","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407027,"byte_end":407062,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/  Ok((&b\"fg\"[..], (&b\"abc\"[..], &b\"de\"[..])))","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407063,"byte_end":407111,"line_start":25,"line_end":25,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407112,"byte_end":407118,"line_start":26,"line_end":26,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407119,"byte_end":407126,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407127,"byte_end":407134,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407135,"byte_end":407138,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The `ws!` combinator will modify the parser to","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407139,"byte_end":407189,"line_start":30,"line_end":30,"column_start":1,"column_end":51}},{"value":"/ intersperse space parsers everywhere. By default,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407190,"byte_end":407243,"line_start":31,"line_end":31,"column_start":1,"column_end":54}},{"value":"/ it will consume the following characters: `\" \\t\\r\\n\"`.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407244,"byte_end":407302,"line_start":32,"line_end":32,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407303,"byte_end":407306,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ If you want to modify that behaviour, you can make","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407307,"byte_end":407361,"line_start":34,"line_end":34,"column_start":1,"column_end":55}},{"value":"/ your own whitespace wrapper. As an example, if","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407362,"byte_end":407412,"line_start":35,"line_end":35,"column_start":1,"column_end":51}},{"value":"/ you don't want to consume ends of lines, only","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407413,"byte_end":407462,"line_start":36,"line_end":36,"column_start":1,"column_end":50}},{"value":"/ spaces and tabs, you can do it like this:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407463,"byte_end":407508,"line_start":37,"line_end":37,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407509,"byte_end":407512,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407513,"byte_end":407520,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407521,"byte_end":407557,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/ named!(pub space, eat_separator!(&b\" \\t\"[..]));","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407558,"byte_end":407609,"line_start":41,"line_end":41,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407610,"byte_end":407613,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ #[macro_export]","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407614,"byte_end":407633,"line_start":43,"line_end":43,"column_start":1,"column_end":20}},{"value":"/ macro_rules! sp (","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407634,"byte_end":407655,"line_start":44,"line_end":44,"column_start":1,"column_end":22}},{"value":"/   ($i:expr, $($args:tt)*) => (","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407656,"byte_end":407690,"line_start":45,"line_end":45,"column_start":1,"column_end":35}},{"value":"/     {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407691,"byte_end":407700,"line_start":46,"line_end":46,"column_start":1,"column_end":10}},{"value":"/       use nom::Convert;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407701,"byte_end":407728,"line_start":47,"line_end":47,"column_start":1,"column_end":28}},{"value":"/       use nom::Err;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407729,"byte_end":407752,"line_start":48,"line_end":48,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407753,"byte_end":407756,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/       match sep!($i, space, $($args)*) {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407757,"byte_end":407801,"line_start":50,"line_end":50,"column_start":1,"column_end":45}},{"value":"/         Err(e) => Err(e),","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407802,"byte_end":407831,"line_start":51,"line_end":51,"column_start":1,"column_end":30}},{"value":"/         Ok((i1,o))    => {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407832,"byte_end":407862,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/           match space(i1) {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407863,"byte_end":407894,"line_start":53,"line_end":53,"column_start":1,"column_end":32}},{"value":"/             Err(e) => Err(Err::convert(e)),","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407895,"byte_end":407942,"line_start":54,"line_end":54,"column_start":1,"column_end":48}},{"value":"/             Ok((i2,_))    => Ok((i2, o))","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407943,"byte_end":407987,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/           }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":407988,"byte_end":408003,"line_start":56,"line_end":56,"column_start":1,"column_end":16}},{"value":"/         }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408004,"byte_end":408017,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/       }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408018,"byte_end":408029,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"/     }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408030,"byte_end":408039,"line_start":59,"line_end":59,"column_start":1,"column_end":10}},{"value":"/   )","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408040,"byte_end":408047,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408048,"byte_end":408054,"line_start":61,"line_end":61,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408055,"byte_end":408058,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408059,"byte_end":408076,"line_start":63,"line_end":63,"column_start":1,"column_end":18}},{"value":"/ named!(tuple<&[u8], (&[u8], &[u8]) >,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408077,"byte_end":408118,"line_start":64,"line_end":64,"column_start":1,"column_end":42}},{"value":"/   sp!(tuple!( take!(3), tag!(\"de\") ))","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408119,"byte_end":408160,"line_start":65,"line_end":65,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408161,"byte_end":408167,"line_start":66,"line_end":66,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408168,"byte_end":408171,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408172,"byte_end":408187,"line_start":68,"line_end":68,"column_start":1,"column_end":16}},{"value":"/   tuple(&b\" \\t abc de fg\"[..]),","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408188,"byte_end":408223,"line_start":69,"line_end":69,"column_start":1,"column_end":36}},{"value":"/  Ok((&b\"fg\"[..], (&b\"abc\"[..], &b\"de\"[..])))","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408224,"byte_end":408272,"line_start":70,"line_end":70,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408273,"byte_end":408279,"line_start":71,"line_end":71,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408280,"byte_end":408287,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408288,"byte_end":408295,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408296,"byte_end":408299,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ This combinator works by replacing each combinator with","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408300,"byte_end":408359,"line_start":75,"line_end":75,"column_start":1,"column_end":60}},{"value":"/ a version that supports wrapping with separator parsers.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408360,"byte_end":408420,"line_start":76,"line_end":76,"column_start":1,"column_end":61}},{"value":"/ It will not support the combinators you wrote in your","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408421,"byte_end":408478,"line_start":77,"line_end":77,"column_start":1,"column_end":58}},{"value":"/ own code. You can still manually wrap them with the separator","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408479,"byte_end":408544,"line_start":78,"line_end":78,"column_start":1,"column_end":66}},{"value":"/ you want, or you can copy the macros defined in src/whitespace.rs","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408545,"byte_end":408614,"line_start":79,"line_end":79,"column_start":1,"column_end":70}},{"value":"/ and modify them to support a new combinator:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408615,"byte_end":408663,"line_start":80,"line_end":80,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408664,"byte_end":408667,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ * copy the combinator's code here, add the _sep suffix","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408668,"byte_end":408726,"line_start":82,"line_end":82,"column_start":1,"column_end":59}},{"value":"/ * add the `$separator:expr` as second argument","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408727,"byte_end":408777,"line_start":83,"line_end":83,"column_start":1,"column_end":51}},{"value":"/ * wrap any sub parsers with sep!($separator, $submac!($($args)*))","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408778,"byte_end":408847,"line_start":84,"line_end":84,"column_start":1,"column_end":70}},{"value":"/ * reference it in the definition of `sep!` as follows:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408848,"byte_end":408906,"line_start":85,"line_end":85,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408907,"byte_end":408910,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408911,"byte_end":408924,"line_start":87,"line_end":87,"column_start":1,"column_end":14}},{"value":"/  ($i:expr,  $separator:path, my_combinator ! ($($rest:tt)*) ) => {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408925,"byte_end":408995,"line_start":88,"line_end":88,"column_start":1,"column_end":71}},{"value":"/    wrap_sep!($i,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":408996,"byte_end":409016,"line_start":89,"line_end":89,"column_start":1,"column_end":21}},{"value":"/      $separator,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":409017,"byte_end":409037,"line_start":90,"line_end":90,"column_start":1,"column_end":21}},{"value":"/      my_combinator_sep!($separator, $($rest)*)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":409038,"byte_end":409088,"line_start":91,"line_end":91,"column_start":1,"column_end":51}},{"value":"/    )","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":409089,"byte_end":409097,"line_start":92,"line_end":92,"column_start":1,"column_end":9}},{"value":"/  };","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":409098,"byte_end":409105,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":409106,"byte_end":409113,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":409114,"byte_end":409117,"line_start":95,"line_end":95,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":903},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":431477,"byte_end":431479,"line_start":834,"line_end":834,"column_start":8,"column_end":10},"name":"sp","qualname":"::whitespace::sp","value":"pub fn sp<'a, T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar + Clone,\n&'a str: FindToken<<T as InputTakeAtPosition>::Item>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_imports)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/whitespace.rs","byte_start":431445,"byte_end":431469,"line_start":833,"line_end":833,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":920},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"types","qualname":"::types","value":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":925},{"krate":0,"index":928},{"krate":0,"index":931},{"krate":0,"index":934},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":949},{"krate":0,"index":952},{"krate":0,"index":955},{"krate":0,"index":958},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":965},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":972},{"krate":0,"index":975},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":981},{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":991},{"krate":0,"index":994},{"krate":0,"index":997},{"krate":0,"index":1000},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1007},{"krate":0,"index":1010},{"krate":0,"index":1013},{"krate":0,"index":3239},{"krate":0,"index":3243},{"krate":0,"index":3246},{"krate":0,"index":3248},{"krate":0,"index":3251},{"krate":0,"index":3253},{"krate":0,"index":3257},{"krate":0,"index":3259},{"krate":0,"index":3262},{"krate":0,"index":1016},{"krate":0,"index":1019},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1033},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1042},{"krate":0,"index":1045},{"krate":0,"index":1048},{"krate":0,"index":1059},{"krate":0,"index":1063},{"krate":0,"index":1066},{"krate":0,"index":1071},{"krate":0,"index":1075},{"krate":0,"index":1078},{"krate":0,"index":1081},{"krate":0,"index":1085},{"krate":0,"index":1089},{"krate":0,"index":1092},{"krate":0,"index":1095},{"krate":0,"index":3266},{"krate":0,"index":3270},{"krate":0,"index":3273},{"krate":0,"index":3275},{"krate":0,"index":3278},{"krate":0,"index":3280},{"krate":0,"index":3284},{"krate":0,"index":3286},{"krate":0,"index":3289},{"krate":0,"index":1101},{"krate":0,"index":1104},{"krate":0,"index":1108},{"krate":0,"index":1112},{"krate":0,"index":1115},{"krate":0,"index":1118},{"krate":0,"index":1121},{"krate":0,"index":1124},{"krate":0,"index":1127},{"krate":0,"index":1138},{"krate":0,"index":1142},{"krate":0,"index":1145},{"krate":0,"index":1150},{"krate":0,"index":1155},{"krate":0,"index":1159},{"krate":0,"index":1163},{"krate":0,"index":1166},{"krate":0,"index":1169},{"krate":0,"index":1173},{"krate":0,"index":1177},{"krate":0,"index":1180},{"krate":0,"index":1183},{"krate":0,"index":3293},{"krate":0,"index":3297},{"krate":0,"index":3300},{"krate":0,"index":3302},{"krate":0,"index":3305},{"krate":0,"index":3307},{"krate":0,"index":3311},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1193},{"krate":0,"index":1196},{"krate":0,"index":1199},{"krate":0,"index":1202},{"krate":0,"index":1213},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1225},{"krate":0,"index":1229},{"krate":0,"index":1232},{"krate":0,"index":1235},{"krate":0,"index":1239},{"krate":0,"index":1244},{"krate":0,"index":1247}],"decl_id":null,"docs":" Custom input types","sig":null,"attributes":[{"value":"/ Custom input types","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":462056,"byte_end":462078,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":462079,"byte_end":462082,"line_start":2,"line_end":2,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3239},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":462855,"byte_end":462866,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"CompleteStr","qualname":"::types::CompleteStr","value":"","parent":null,"children":[],"decl_id":null,"docs":" Holds a complete String, for which the `at_eof` method always returns true","sig":null,"attributes":[{"value":"/ Holds a complete String, for which the `at_eof` method always returns true","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":462597,"byte_end":462675,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":462676,"byte_end":462679,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This means that this input type will completely avoid nom's streaming features","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":462680,"byte_end":462762,"line_start":20,"line_end":20,"column_start":1,"column_end":83}},{"value":"/ and `Incomplete` results.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":462763,"byte_end":462792,"line_start":21,"line_end":21,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":3242},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":462871,"byte_end":462882,"line_start":23,"line_end":23,"column_start":28,"column_end":39},"name":"0","qualname":"::types::CompleteStr::0","value":"&'a str","parent":{"krate":0,"index":3239},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3266},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":466751,"byte_end":466768,"line_start":204,"line_end":204,"column_start":12,"column_end":29},"name":"CompleteByteSlice","qualname":"::types::CompleteByteSlice","value":"","parent":null,"children":[],"decl_id":null,"docs":" Holds a complete byte array, for which the `at_eof` method always returns true","sig":null,"attributes":[{"value":"/ Holds a complete byte array, for which the `at_eof` method always returns true","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":466489,"byte_end":466571,"line_start":199,"line_end":199,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":466572,"byte_end":466575,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ This means that this input type will completely avoid nom's streaming features","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":466576,"byte_end":466658,"line_start":201,"line_end":201,"column_start":1,"column_end":83}},{"value":"/ and `Incomplete` results.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":466659,"byte_end":466688,"line_start":202,"line_end":202,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":3269},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":466773,"byte_end":466785,"line_start":204,"line_end":204,"column_start":34,"column_end":46},"name":"0","qualname":"::types::CompleteByteSlice::0","value":"&'a [u8]","parent":{"krate":0,"index":3266},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3293},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470893,"byte_end":470898,"line_start":380,"line_end":380,"column_start":12,"column_end":17},"name":"Input","qualname":"::types::Input","value":"Input { inner, at_eof }","parent":null,"children":[{"krate":0,"index":3295},{"krate":0,"index":3296}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3295},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470910,"byte_end":470915,"line_start":381,"line_end":381,"column_start":7,"column_end":12},"name":"inner","qualname":"::types::Input::inner","value":"T","parent":{"krate":0,"index":3293},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3296},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470926,"byte_end":470932,"line_start":382,"line_end":382,"column_start":7,"column_end":13},"name":"at_eof","qualname":"::types::Input::at_eof","value":"bool","parent":{"krate":0,"index":3293},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":1,"kind":"Inherent","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":30128,"byte_end":30137,"line_start":565,"line_end":565,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":34485,"byte_end":34494,"line_start":647,"line_end":647,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39858,"byte_end":39865,"line_start":24,"line_end":24,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":40011,"byte_end":40018,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46047,"byte_end":46053,"line_start":29,"line_end":29,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":48399,"byte_end":48402,"line_start":87,"line_end":87,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":48636,"byte_end":48639,"line_start":101,"line_end":101,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":49194,"byte_end":49197,"line_start":122,"line_end":122,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":49445,"byte_end":49448,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":70735,"byte_end":70736,"line_start":480,"line_end":480,"column_start":107,"column_end":108},"value":"","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":72511,"byte_end":72528,"line_start":546,"line_end":546,"column_start":34,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":74448,"byte_end":74459,"line_start":614,"line_end":614,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":462913,"byte_end":462924,"line_start":25,"line_end":25,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463028,"byte_end":463039,"line_start":31,"line_end":31,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463134,"byte_end":463145,"line_start":37,"line_end":37,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1025}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463248,"byte_end":463259,"line_start":43,"line_end":43,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463332,"byte_end":463343,"line_start":49,"line_end":49,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1031},{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463463,"byte_end":463474,"line_start":58,"line_end":58,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463571,"byte_end":463582,"line_start":65,"line_end":65,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463729,"byte_end":463740,"line_start":72,"line_end":72,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463891,"byte_end":463902,"line_start":79,"line_end":79,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1044}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":464048,"byte_end":464059,"line_start":86,"line_end":86,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":464191,"byte_end":464202,"line_start":93,"line_end":93,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":464714,"byte_end":464725,"line_start":116,"line_end":116,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1061},{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":464995,"byte_end":465006,"line_start":127,"line_end":127,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1065}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":465110,"byte_end":465121,"line_start":133,"line_end":133,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1069},{"krate":0,"index":1070}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":465341,"byte_end":465352,"line_start":142,"line_end":142,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":465492,"byte_end":465503,"line_start":148,"line_end":148,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1077}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":465619,"byte_end":465630,"line_start":154,"line_end":154,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1080}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":465752,"byte_end":465763,"line_start":160,"line_end":160,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":465887,"byte_end":465898,"line_start":166,"line_end":166,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":465992,"byte_end":466003,"line_start":172,"line_end":172,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1091}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":466122,"byte_end":466133,"line_start":178,"line_end":178,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":466259,"byte_end":466270,"line_start":185,"line_end":185,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":466817,"byte_end":466834,"line_start":206,"line_end":206,"column_start":29,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1103}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":466946,"byte_end":466963,"line_start":212,"line_end":212,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1107}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":467063,"byte_end":467080,"line_start":218,"line_end":218,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1110},{"krate":0,"index":1111}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":467201,"byte_end":467218,"line_start":227,"line_end":227,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1114}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":467315,"byte_end":467332,"line_start":234,"line_end":234,"column_start":34,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1117}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":467485,"byte_end":467502,"line_start":241,"line_end":241,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1120}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":467659,"byte_end":467676,"line_start":248,"line_end":248,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":467828,"byte_end":467845,"line_start":255,"line_end":255,"column_start":31,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":467983,"byte_end":468000,"line_start":262,"line_end":262,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1137}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":468576,"byte_end":468593,"line_start":285,"line_end":285,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1140},{"krate":0,"index":1141}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":468881,"byte_end":468898,"line_start":296,"line_end":296,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":469003,"byte_end":469020,"line_start":302,"line_end":302,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":469236,"byte_end":469253,"line_start":311,"line_end":311,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1153},{"krate":0,"index":1154}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":469474,"byte_end":469491,"line_start":320,"line_end":320,"column_start":42,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":469643,"byte_end":469660,"line_start":326,"line_end":326,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1162}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":469800,"byte_end":469817,"line_start":332,"line_end":332,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1165}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":469933,"byte_end":469950,"line_start":338,"line_end":338,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1168}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470072,"byte_end":470089,"line_start":344,"line_end":344,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1172}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470213,"byte_end":470230,"line_start":350,"line_end":350,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470322,"byte_end":470339,"line_start":356,"line_end":356,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1179}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470464,"byte_end":470481,"line_start":362,"line_end":362,"column_start":22,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470610,"byte_end":470627,"line_start":369,"line_end":369,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1185},{"krate":0,"index":1186}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470961,"byte_end":470966,"line_start":385,"line_end":385,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1189}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":471077,"byte_end":471082,"line_start":391,"line_end":391,"column_start":54,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1192}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":471284,"byte_end":471289,"line_start":400,"line_end":400,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1195}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":471497,"byte_end":471502,"line_start":409,"line_end":409,"column_start":62,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":471698,"byte_end":471703,"line_start":418,"line_end":418,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":471878,"byte_end":471883,"line_start":427,"line_end":427,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1212}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":472483,"byte_end":472488,"line_start":450,"line_end":450,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1215},{"krate":0,"index":1216}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":472934,"byte_end":472939,"line_start":473,"line_end":473,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1219}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":473063,"byte_end":473068,"line_start":479,"line_end":479,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1223},{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":473318,"byte_end":473323,"line_start":488,"line_end":488,"column_start":64,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1228}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":473482,"byte_end":473487,"line_start":494,"line_end":494,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1231}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":473620,"byte_end":473625,"line_start":500,"line_end":500,"column_start":42,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1234}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":473768,"byte_end":473773,"line_start":506,"line_end":506,"column_start":54,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1238}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":473918,"byte_end":473923,"line_start":512,"line_end":512,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1243}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":474025,"byte_end":474030,"line_start":518,"line_end":518,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1246}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":474158,"byte_end":474163,"line_start":524,"line_end":524,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14608,"byte_end":14621,"line_start":433,"line_end":433,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":112}},{"kind":"Mod","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14785,"byte_end":14792,"line_start":447,"line_end":447,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":606}},{"kind":"Mod","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14840,"byte_end":14844,"line_start":452,"line_end":452,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":633}},{"kind":"Mod","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":14919,"byte_end":14929,"line_start":460,"line_end":460,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":873}},{"kind":"Mod","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/lib.rs","byte_start":15003,"byte_end":15008,"line_start":468,"line_end":468,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":920}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":30128,"byte_end":30137,"line_start":565,"line_end":565,"column_start":9,"column_end":18},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/util.rs","byte_start":34485,"byte_end":34494,"line_start":647,"line_end":647,"column_start":47,"column_end":56},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1250},"to":{"krate":0,"index":105}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":39858,"byte_end":39865,"line_start":24,"line_end":24,"column_start":51,"column_end":58},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1398},"to":{"krate":0,"index":105}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/simple_errors.rs","byte_start":40011,"byte_end":40018,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1398},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":46047,"byte_end":46053,"line_start":29,"line_end":29,"column_start":6,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1421},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":48399,"byte_end":48402,"line_start":87,"line_end":87,"column_start":29,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":9359}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":48636,"byte_end":48639,"line_start":101,"line_end":101,"column_start":22,"column_end":25},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1439},"to":{"krate":1,"index":2339}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":49194,"byte_end":49197,"line_start":122,"line_end":122,"column_start":47,"column_end":50},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1439},"to":{"krate":0,"index":105}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/internal.rs","byte_start":49445,"byte_end":49448,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":67265,"byte_end":67270,"line_start":345,"line_end":345,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":326}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":70356,"byte_end":70361,"line_start":469,"line_end":469,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":3009},"to":{"krate":0,"index":368}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":70735,"byte_end":70736,"line_start":480,"line_end":480,"column_start":107,"column_end":108},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":375},"to":{"krate":0,"index":368}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":72511,"byte_end":72528,"line_start":546,"line_end":546,"column_start":34,"column_end":51},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":368}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/traits.rs","byte_start":74448,"byte_end":74459,"line_start":614,"line_end":614,"column_start":34,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":368}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":462913,"byte_end":462924,"line_start":25,"line_end":25,"column_start":28,"column_end":39},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3239},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463028,"byte_end":463039,"line_start":31,"line_end":31,"column_start":36,"column_end":47},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3239},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463134,"byte_end":463145,"line_start":37,"line_end":37,"column_start":22,"column_end":33},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3239},"to":{"krate":2,"index":9359}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463248,"byte_end":463259,"line_start":43,"line_end":43,"column_start":25,"column_end":36},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3239},"to":{"krate":2,"index":2901}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463332,"byte_end":463343,"line_start":49,"line_end":49,"column_start":20,"column_end":31},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":3239},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463463,"byte_end":463474,"line_start":58,"line_end":58,"column_start":20,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":497}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463571,"byte_end":463582,"line_start":65,"line_end":65,"column_start":34,"column_end":45},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":491}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463729,"byte_end":463740,"line_start":72,"line_end":72,"column_start":36,"column_end":47},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":491}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":463891,"byte_end":463902,"line_start":79,"line_end":79,"column_start":38,"column_end":49},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":491}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":464048,"byte_end":464059,"line_start":86,"line_end":86,"column_start":31,"column_end":42},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":491}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":464191,"byte_end":464202,"line_start":93,"line_end":93,"column_start":24,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":316}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":464714,"byte_end":464725,"line_start":116,"line_end":116,"column_start":24,"column_end":35},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":326}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":464995,"byte_end":465006,"line_start":127,"line_end":127,"column_start":26,"column_end":37},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":237}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":465110,"byte_end":465121,"line_start":133,"line_end":133,"column_start":35,"column_end":46},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":417}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":465341,"byte_end":465352,"line_start":142,"line_end":142,"column_start":41,"column_end":52},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":464}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":465492,"byte_end":465503,"line_start":148,"line_end":148,"column_start":30,"column_end":41},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":441}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":465619,"byte_end":465630,"line_start":154,"line_end":154,"column_start":28,"column_end":39},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":441}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":465752,"byte_end":465763,"line_start":160,"line_end":160,"column_start":36,"column_end":47},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":441}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":465887,"byte_end":465898,"line_start":166,"line_end":166,"column_start":37,"column_end":48},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":479}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":465992,"byte_end":466003,"line_start":172,"line_end":172,"column_start":21,"column_end":32},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":249}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":466122,"byte_end":466133,"line_start":178,"line_end":178,"column_start":22,"column_end":33},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":261}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":466259,"byte_end":466270,"line_start":185,"line_end":185,"column_start":25,"column_end":36},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":3239},"to":{"krate":0,"index":519}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":466817,"byte_end":466834,"line_start":206,"line_end":206,"column_start":29,"column_end":46},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3266},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":466946,"byte_end":466963,"line_start":212,"line_end":212,"column_start":37,"column_end":54},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":3266},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":467063,"byte_end":467080,"line_start":218,"line_end":218,"column_start":20,"column_end":37},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3266},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":467201,"byte_end":467218,"line_start":227,"line_end":227,"column_start":20,"column_end":37},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":497}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":467315,"byte_end":467332,"line_start":234,"line_end":234,"column_start":34,"column_end":51},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":491}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":467485,"byte_end":467502,"line_start":241,"line_end":241,"column_start":36,"column_end":53},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":491}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":467659,"byte_end":467676,"line_start":248,"line_end":248,"column_start":38,"column_end":55},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":491}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":467828,"byte_end":467845,"line_start":255,"line_end":255,"column_start":31,"column_end":48},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":491}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":467983,"byte_end":468000,"line_start":262,"line_end":262,"column_start":24,"column_end":41},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":316}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":468576,"byte_end":468593,"line_start":285,"line_end":285,"column_start":24,"column_end":41},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":326}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":468881,"byte_end":468898,"line_start":296,"line_end":296,"column_start":26,"column_end":43},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":237}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":469003,"byte_end":469020,"line_start":302,"line_end":302,"column_start":36,"column_end":53},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":417}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":469236,"byte_end":469253,"line_start":311,"line_end":311,"column_start":35,"column_end":52},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":417}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":469474,"byte_end":469491,"line_start":320,"line_end":320,"column_start":42,"column_end":59},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":464}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":469643,"byte_end":469660,"line_start":326,"line_end":326,"column_start":41,"column_end":58},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":464}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":469800,"byte_end":469817,"line_start":332,"line_end":332,"column_start":30,"column_end":47},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":441}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":469933,"byte_end":469950,"line_start":338,"line_end":338,"column_start":28,"column_end":45},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":441}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470072,"byte_end":470089,"line_start":344,"line_end":344,"column_start":36,"column_end":53},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":441}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470213,"byte_end":470230,"line_start":350,"line_end":350,"column_start":37,"column_end":54},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":479}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470322,"byte_end":470339,"line_start":356,"line_end":356,"column_start":21,"column_end":38},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":249}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470464,"byte_end":470481,"line_start":362,"line_end":362,"column_start":22,"column_end":39},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":261}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470610,"byte_end":470627,"line_start":369,"line_end":369,"column_start":38,"column_end":55},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":81}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":470961,"byte_end":470966,"line_start":385,"line_end":385,"column_start":19,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":497}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":471077,"byte_end":471082,"line_start":391,"line_end":391,"column_start":54,"column_end":59},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":491}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":471284,"byte_end":471289,"line_start":400,"line_end":400,"column_start":58,"column_end":63},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":491}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":471497,"byte_end":471502,"line_start":409,"line_end":409,"column_start":62,"column_end":67},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":491}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":471698,"byte_end":471703,"line_start":418,"line_end":418,"column_start":48,"column_end":53},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":491}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":471878,"byte_end":471883,"line_start":427,"line_end":427,"column_start":34,"column_end":39},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":316}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":472483,"byte_end":472488,"line_start":450,"line_end":450,"column_start":34,"column_end":39},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":326}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":472934,"byte_end":472939,"line_start":473,"line_end":473,"column_start":38,"column_end":43},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":237}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":473063,"byte_end":473068,"line_start":479,"line_end":479,"column_start":52,"column_end":57},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":417}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":473318,"byte_end":473323,"line_start":488,"line_end":488,"column_start":64,"column_end":69},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":464}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":473482,"byte_end":473487,"line_start":494,"line_end":494,"column_start":46,"column_end":51},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":441}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":473620,"byte_end":473625,"line_start":500,"line_end":500,"column_start":42,"column_end":47},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":441}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":473768,"byte_end":473773,"line_start":506,"line_end":506,"column_start":54,"column_end":59},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":441}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":473918,"byte_end":473923,"line_start":512,"line_end":512,"column_start":52,"column_end":57},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":479}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":474025,"byte_end":474030,"line_start":518,"line_end":518,"column_start":28,"column_end":33},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":249}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.1.1/src/types.rs","byte_start":474158,"byte_end":474163,"line_start":524,"line_end":524,"column_start":30,"column_end":35},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3293},"to":{"krate":0,"index":261}}]}