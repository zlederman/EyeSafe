{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1","program":"/Users/zlederman/.rustup/toolchains/nightly-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","boxfnonce","/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=9270c2c82d755540","-C","extra-filename=-9270c2c82d755540","--out-dir","/Users/zlederman/Documents/Code/rust/EyeSafe/target/rls/debug/deps","-L","dependency=/Users/zlederman/Documents/Code/rust/EyeSafe/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/zlederman/.rustup/toolchains/nightly-aarch64-apple-darwin"],"output":"/Users/zlederman/Documents/Code/rust/EyeSafe/target/rls/debug/deps/libboxfnonce-9270c2c82d755540.rmeta"},"prelude":{"crate_id":{"name":"boxfnonce","disambiguator":[12710618282242923213,0]},"crate_root":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src","external_crates":[{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12357763755908187540,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5231689799850066461,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17864008973282999150,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17296295565214172833,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2118848927325286491,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10139776392043815228,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8108086124737747874,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15708407810567005444,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2791263468303431766,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6506189918680636659,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8728067978980854181,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[7214232113437722909,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[10719114933783356113,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[903433031267741442,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[3053230250002770710,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[4944501850750929564,0]}},{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14620013372125053763,0]}}],"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","byte_start":0,"byte_end":794,"line_start":1,"line_end":29,"column_start":1,"column_end":35}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":15},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","byte_start":738,"byte_end":747,"line_start":26,"line_end":26,"column_start":24,"column_end":33},"alias_span":null,"name":"BoxFnOnce","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":40},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","byte_start":780,"byte_end":793,"line_start":29,"line_end":29,"column_start":21,"column_end":34},"alias_span":null,"name":"SendBoxFnOnce","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":41},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","byte_start":780,"byte_end":793,"line_start":29,"line_end":29,"column_start":21,"column_end":34},"alias_span":null,"name":"SendBoxFnOnce","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","byte_start":0,"byte_end":794,"line_start":1,"line_end":29,"column_start":1,"column_end":35},"name":"","qualname":"::","value":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":11},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":53},{"krate":0,"index":54}],"decl_id":null,"docs":" See `BoxFnOnce` and `SendBoxFnOnce`.\n","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"/ See `BoxFnOnce` and `SendBoxFnOnce`.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/lib.rs","byte_start":83,"byte_end":123,"line_start":4,"line_end":4,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":15},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4080,"byte_end":4089,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"BoxFnOnce","qualname":"::no_send::BoxFnOnce","value":"","parent":null,"children":[],"decl_id":null,"docs":" `BoxFnOnce` boxes any `FnOnce` function up to a certain number of\n arguments (10 as of now).","sig":null,"attributes":[{"value":"/ `BoxFnOnce` boxes any `FnOnce` function up to a certain number of","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":2531,"byte_end":2600,"line_start":3,"line_end":3,"column_start":1,"column_end":70}},{"value":"/ arguments (10 as of now).","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":2601,"byte_end":2630,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":2631,"byte_end":2634,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ As `Box<FnOnce()>` doesn't work yet, and `Box<FnBox()>` will not be","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":2635,"byte_end":2706,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"/ available in stable rust, `BoxFnOnce` tries to provide a safe","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":2707,"byte_end":2772,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/ implementation.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":2773,"byte_end":2792,"line_start":8,"line_end":8,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":2793,"byte_end":2796,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Instead of `Box<FnOnce(Args...) -> Result + 'a>` (or","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":2797,"byte_end":2853,"line_start":10,"line_end":10,"column_start":1,"column_end":57}},{"value":"/ `Box<FnBox(Args...) -> Result> + 'a`) the box type is `BoxFnOnce<'a,","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":2854,"byte_end":2926,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"/ (Args...,), Result>`  (the arguments are always given as tuple","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":2927,"byte_end":2993,"line_start":12,"line_end":12,"column_start":1,"column_end":67}},{"value":"/ type).  If the function doesn't return a value (i.e. the empty","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":2994,"byte_end":3060,"line_start":13,"line_end":13,"column_start":1,"column_end":67}},{"value":"/ tuple) `Result` can be omitted: `BoxFnOnce<'a, (Args...,)>`.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3061,"byte_end":3125,"line_start":14,"line_end":14,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3126,"byte_end":3129,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Internally it is implemented similar to `Box<FnBox()>`, but there","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3130,"byte_end":3199,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ is no `FnOnce` implementation for `BoxFnOnce`.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3200,"byte_end":3250,"line_start":17,"line_end":17,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3251,"byte_end":3254,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ You can build boxes for diverging functions too, but specifying the","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3255,"byte_end":3326,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/ type (like `BoxFnOnce<'a, (), !>`) is not possible as the `!` type","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3327,"byte_end":3397,"line_start":20,"line_end":20,"column_start":1,"column_end":71}},{"value":"/ is experimental.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3398,"byte_end":3418,"line_start":21,"line_end":21,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3419,"byte_end":3422,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ If you need to send the FnOnce use `SendBoxFnOnce` instead.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3423,"byte_end":3486,"line_start":23,"line_end":23,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3487,"byte_end":3490,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3491,"byte_end":3505,"line_start":25,"line_end":25,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3506,"byte_end":3509,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Move value into closure and box it:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3510,"byte_end":3549,"line_start":27,"line_end":27,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3550,"byte_end":3553,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3554,"byte_end":3561,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use boxfnonce::BoxFnOnce;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3562,"byte_end":3591,"line_start":30,"line_end":30,"column_start":1,"column_end":30}},{"value":"/ let s = String::from(\"foo\");","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3592,"byte_end":3624,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"/ let f : BoxFnOnce<()> = BoxFnOnce::from(|| {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3625,"byte_end":3673,"line_start":32,"line_end":32,"column_start":1,"column_end":49}},{"value":"/     println!(\"Got called: {}\", s);","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3674,"byte_end":3712,"line_start":33,"line_end":33,"column_start":1,"column_end":39}},{"value":"/     drop(s);","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3713,"byte_end":3729,"line_start":34,"line_end":34,"column_start":1,"column_end":17}},{"value":"/ });","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3730,"byte_end":3737,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ f.call();","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3738,"byte_end":3751,"line_start":36,"line_end":36,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3752,"byte_end":3759,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3760,"byte_end":3763,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Move value into closure to return it, and box the closure:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3764,"byte_end":3826,"line_start":39,"line_end":39,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3827,"byte_end":3830,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3831,"byte_end":3838,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ use boxfnonce::BoxFnOnce;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3839,"byte_end":3868,"line_start":42,"line_end":42,"column_start":1,"column_end":30}},{"value":"/ let s = String::from(\"foo\");","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3869,"byte_end":3901,"line_start":43,"line_end":43,"column_start":1,"column_end":33}},{"value":"/ let f : BoxFnOnce<(), String> = BoxFnOnce::from(|| {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3902,"byte_end":3958,"line_start":44,"line_end":44,"column_start":1,"column_end":57}},{"value":"/     println!(\"Got called: {}\", s);","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3959,"byte_end":3997,"line_start":45,"line_end":45,"column_start":1,"column_end":39}},{"value":"/     s","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":3998,"byte_end":4007,"line_start":46,"line_end":46,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4008,"byte_end":4015,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(f.call(), \"foo\".to_string());","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4016,"byte_end":4060,"line_start":48,"line_end":48,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4061,"byte_end":4068,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4471,"byte_end":4481,"line_start":59,"line_end":59,"column_start":9,"column_end":19},"name":"call_tuple","qualname":"<BoxFnOnce>::call_tuple","value":"pub fn call_tuple(Self, Args) -> Result","parent":null,"children":[],"decl_id":null,"docs":" call inner function, consumes the box.","sig":null,"attributes":[{"value":"/ call inner function, consumes the box.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4211,"byte_end":4253,"line_start":53,"line_end":53,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4255,"byte_end":4258,"line_start":54,"line_end":54,"column_start":2,"column_end":5}},{"value":"/ `call_tuple` can be used if the arguments are available as","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4260,"byte_end":4322,"line_start":55,"line_end":55,"column_start":2,"column_end":64}},{"value":"/ tuple. Each usable instance of BoxFnOnce<(...), Result> has a","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4324,"byte_end":4389,"line_start":56,"line_end":56,"column_start":2,"column_end":67}},{"value":"/ separate `call` method for passing arguments \"untupled\".","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4391,"byte_end":4451,"line_start":57,"line_end":57,"column_start":2,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4453,"byte_end":4462,"line_start":58,"line_end":58,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4612,"byte_end":4615,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"name":"new","qualname":"<BoxFnOnce>::new","value":"pub fn new<F>(F) -> Self where Self: From<F>","parent":null,"children":[],"decl_id":null,"docs":" `BoxFnOnce::new` is an alias for `BoxFnOnce::from`.\n","sig":null,"attributes":[{"value":"/ `BoxFnOnce::new` is an alias for `BoxFnOnce::from`.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4537,"byte_end":4592,"line_start":63,"line_end":63,"column_start":2,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4594,"byte_end":4603,"line_start":64,"line_end":64,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":40},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8658,"byte_end":8671,"line_start":41,"line_end":41,"column_start":12,"column_end":25},"name":"SendBoxFnOnce","qualname":"::send::SendBoxFnOnce","value":"","parent":null,"children":[],"decl_id":null,"docs":" `SendBoxFnOnce` boxes any `FnOnce + Send` function up to a certain\n number of arguments (10 as of now).","sig":null,"attributes":[{"value":"/ `SendBoxFnOnce` boxes any `FnOnce + Send` function up to a certain","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7255,"byte_end":7325,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"/ number of arguments (10 as of now).","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7326,"byte_end":7365,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7366,"byte_end":7369,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ As `Box<FnOnce()>` doesn't work yet, and `Box<FnBox()>` will not be","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7370,"byte_end":7441,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"/ available in stable rust, `SendBoxFnOnce` tries to provide a safe","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7442,"byte_end":7511,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ implementation.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7512,"byte_end":7531,"line_start":8,"line_end":8,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7532,"byte_end":7535,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Instead of `Box<FnOnce(Args...) -> Result + 'a>` (or","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7536,"byte_end":7592,"line_start":10,"line_end":10,"column_start":1,"column_end":57}},{"value":"/ `Box<FnBox(Args...) -> Result + 'a>`) the box type is","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7593,"byte_end":7650,"line_start":11,"line_end":11,"column_start":1,"column_end":58}},{"value":"/ `SendBoxFnOnce<'a, (Args...,), Result>`  (the arguments are always given","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7651,"byte_end":7727,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ as tuple type).  If the function doesn't return a value (i.e. the","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7728,"byte_end":7797,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"/ empty tuple) `Result` can be omitted: `SendBoxFnOnce<'a, (Args...,)>`.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7798,"byte_end":7872,"line_start":14,"line_end":14,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7873,"byte_end":7876,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Internally it is implemented similar to `Box<FnBox()>`, but there is","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7877,"byte_end":7949,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ no `FnOnce` implementation for `SendBoxFnOnce`.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":7950,"byte_end":8001,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8002,"byte_end":8005,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ You can build boxes for diverging functions too, but specifying the","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8006,"byte_end":8077,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/ type (like `SendBoxFnOnce<(), !>`) is not possible as the `!` type","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8078,"byte_end":8148,"line_start":20,"line_end":20,"column_start":1,"column_end":71}},{"value":"/ is experimental.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8149,"byte_end":8169,"line_start":21,"line_end":21,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8170,"byte_end":8173,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8174,"byte_end":8188,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8189,"byte_end":8192,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Move value into closure to return it, box the closure and send it:","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8193,"byte_end":8263,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8264,"byte_end":8267,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8268,"byte_end":8275,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use boxfnonce::SendBoxFnOnce;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8276,"byte_end":8309,"line_start":28,"line_end":28,"column_start":1,"column_end":34}},{"value":"/ use std::thread;","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8310,"byte_end":8330,"line_start":29,"line_end":29,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8331,"byte_end":8334,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let s = String::from(\"foo\");","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8335,"byte_end":8367,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"/ let f : SendBoxFnOnce<(), String> = SendBoxFnOnce::from(|| {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8368,"byte_end":8432,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/     println!(\"Got called: {}\", s);","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8433,"byte_end":8471,"line_start":33,"line_end":33,"column_start":1,"column_end":39}},{"value":"/     s","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8472,"byte_end":8481,"line_start":34,"line_end":34,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8482,"byte_end":8489,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ let result = thread::Builder::new().spawn(move || {","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8490,"byte_end":8545,"line_start":36,"line_end":36,"column_start":1,"column_end":56}},{"value":"/     f.call()","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8546,"byte_end":8562,"line_start":37,"line_end":37,"column_start":1,"column_end":17}},{"value":"/ }).unwrap().join().unwrap();","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8563,"byte_end":8595,"line_start":38,"line_end":38,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(result, \"foo\".to_string());","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8596,"byte_end":8638,"line_start":39,"line_end":39,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8639,"byte_end":8646,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":9079,"byte_end":9089,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"call_tuple","qualname":"<SendBoxFnOnce>::call_tuple","value":"pub fn call_tuple(Self, Args) -> Result","parent":null,"children":[],"decl_id":null,"docs":" call inner function, consumes the box.","sig":null,"attributes":[{"value":"/ call inner function, consumes the box.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8815,"byte_end":8857,"line_start":44,"line_end":44,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8859,"byte_end":8862,"line_start":45,"line_end":45,"column_start":2,"column_end":5}},{"value":"/ `call_tuple` can be used if the arguments are available as","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8864,"byte_end":8926,"line_start":46,"line_end":46,"column_start":2,"column_end":64}},{"value":"/ tuple. Each usable instance of SendBoxFnOnce<(...), Result> has","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8928,"byte_end":8995,"line_start":47,"line_end":47,"column_start":2,"column_end":69}},{"value":"/ a separate `call` method for passing arguments \"untupled\".","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8997,"byte_end":9059,"line_start":48,"line_end":48,"column_start":2,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":9061,"byte_end":9070,"line_start":49,"line_end":49,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":9228,"byte_end":9231,"line_start":56,"line_end":56,"column_start":9,"column_end":12},"name":"new","qualname":"<SendBoxFnOnce>::new","value":"pub fn new<F>(F) -> Self where Self: From<F>","parent":null,"children":[],"decl_id":null,"docs":" `SendBoxFnOnce::new` is an alias for `SendBoxFnOnce::from`.\n","sig":null,"attributes":[{"value":"/ `SendBoxFnOnce::new` is an alias for `SendBoxFnOnce::from`.","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":9145,"byte_end":9208,"line_start":54,"line_end":54,"column_start":2,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":9210,"byte_end":9219,"line_start":55,"line_end":55,"column_start":2,"column_end":11}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4180,"byte_end":4189,"line_start":52,"line_end":52,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":5520,"byte_end":5529,"line_start":84,"line_end":84,"column_start":83,"column_end":92},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8780,"byte_end":8793,"line_start":43,"line_end":43,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":4180,"byte_end":4189,"line_start":52,"line_end":52,"column_start":24,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":15},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/no_send.rs","byte_start":5520,"byte_end":5529,"line_start":84,"line_end":84,"column_start":83,"column_end":92},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":15},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/zlederman/.cargo/registry/src/github.com-1ecc6299db9ec823/boxfnonce-0.1.1/src/send.rs","byte_start":8780,"byte_end":8793,"line_start":43,"line_end":43,"column_start":24,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":40},"to":{"krate":4294967295,"index":4294967295}}]}